C51 COMPILER V9.51   MAIN                                                                  05/24/2018 14:45:08 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe Src\main.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\main.lst) TABS(2) OBJECT
                    -(main.obj)

line level    source

   1          #include <c8051f020.h>
   2          #include <string.h>
   3          #include <stdio.h>
   4          #include <intrins.h>
   5          
   6          #include "Declarations_GPIO.h"
   7          #include "Config_Globale.h"
   8          #include "Timers.h"
   9          #include "Servomoteur_Horizontal.h"
  10          #include "ultrason.h"
  11          #include "Config_SPI.h"
  12          #include "Transmission_SPI.h"
  13          #include "Config_ADC.h"
  14          #include "FO_M1_Structures_COMMANDES_INFORMATIONS_CentraleDeCommande.h"
  15          #include "UART0_RingBuffer_lib.h"
  16          #include "ConfigUART1.h"
  17          #include "UART0_RingBuffer_lib.h"
  18          #include "Fonctions_cote_serializer.h"
  19          #include "Lien_Structure_commande.h"
  20          #include "Mesure_courant.h"
  21          
  22          #ifndef CFG_Globale
  23            #define CFG_Globale
  24            #include "CFG_Globale.h"
  25          #endif
  26          
  27          
  28          //------------------------------------------------------------------------------------
  29          // D�clarations des variables globales
  30          //------------------------------------------------------------------------------------
  31          int vitesse_par_defaut = 10;
  32          char message_PC_com[50] = {0};
  33          enum Epreuve epreuve_en_cours = Epreuve_non;
  34          int commande_correct = 0;
  35          double energie = 0;
  36          unsigned int courant = 0;
  37          
  38          char conversioncoord (unsigned char tableau[2]){
  39   1        int dizaine=0;
  40   1        int unite=0;
  41   1        char valeur;
  42   1        
  43   1        dizaine= (tableau[0]-'0')*10;
  44   1        unite= (tableau[1]-'0');
  45   1      
  46   1        valeur=dizaine+unite;
  47   1        return valeur ;
  48   1      }
  49          
  50          char conversioncoord_2 (unsigned char tableau[3]){
  51   1        int dizaine=0;
  52   1        int unite=0;
  53   1        int centaine = 0;
  54   1        char valeur;
C51 COMPILER V9.51   MAIN                                                                  05/24/2018 14:45:08 PAGE 2   

  55   1        
  56   1        centaine = (tableau[0]-'0')*100;
  57   1        dizaine= (tableau[1]-'0')*10;
  58   1        unite= (tableau[2]-'0');
  59   1      
  60   1        valeur=centaine+dizaine+unite;
  61   1        return valeur ;
  62   1      }
  63          
  64          /*char conversionvitesse (unsigned char tableau[3]){
  65            int centaine=0;
  66            int dizaine=0;
  67            int unite=0;
  68            char valeur;
  69          
  70            centaine= (tableau[0]-'0')*100;
  71            dizaine= (tableau[1]-'0')*10;
  72            unite= (tableau[2]-'0');
  73          
  74            valeur= centaine+dizaine+unite;
  75            return valeur ;
  76          }*/
  77          
  78          signed int conv(char* nbr, int taille)
  79          {
  80   1        int k=0;
  81   1        double t1 = 0;
  82   1        signed int ret=0;
  83   1        int numero=0;
  84   1      
  85   1        if(nbr[0]=='-')
  86   1        {
  87   2          for(k=1;k<taille;k++)
  88   2          {
  89   3            numero=nbr[k]-'0';
  90   3            t1 = pow(10,taille-1-k);
  91   3            numero = numero*ceil(pow(10,taille-1-k));
  92   3            ret+=numero;
  93   3          }
  94   2          ret=-1*ret;
  95   2        }
  96   1        else
  97   1        {
  98   2          for(k=0;k<taille;k++)
  99   2          {
 100   3            numero=(nbr[k]-'0')*ceil(pow(10,taille-1-k));
 101   3            ret+=numero;
 102   3          }
 103   2        }
 104   1        return ret;
 105   1      }
 106          signed int conversionangle_positif (unsigned char tableau[3]){
 107   1        signed int centaine=0;
 108   1        signed int dizaine=0;
 109   1        signed int unite=0;
 110   1        signed int valeur;
 111   1      
 112   1        if (tableau[0] == '-') {
 113   2          dizaine= (tableau[1]-'0')*10;
 114   2          unite= (tableau[2]-'0');
 115   2          valeur = -1* (dizaine + unite);
 116   2        }
C51 COMPILER V9.51   MAIN                                                                  05/24/2018 14:45:08 PAGE 3   

 117   1        else {
 118   2          centaine= (tableau[0]-'0')*100;
 119   2          dizaine= (tableau[1]-'0')*10;
 120   2          unite= (tableau[2]-'0');
 121   2          valeur= centaine+dizaine+unite;
 122   2        }
 123   1        return valeur ;
 124   1      }
 125          
 126          struct COMMANDES traitement_A(char * com, struct COMMANDES commande){ // traitement lorsque la premi�re 
             -lettre est A (AVANCER A DUREE DAQUISITION) AVANCER OK
 127   1        char vitesse;
 128   1        char tab[3];
 129   1        int j;
 130   1        char duree;
 131   1      
 132   1        switch (com[1]) //AJOUTER LA DUREE
 133   1            {
 134   2              case 'S': // cas ASS (Dur�e)
 135   2                {
 136   3                  commande_correct = 0; //TODO commande_correct = nbr pour aquisition signal
 137   3                  for (j=4; j<7;j++)
 138   3                    {
 139   4                    tab[j-4]=com[j];
 140   4                  }
 141   3                  duree=conversionangle_positif(tab);
 142   3                  if (duree >= 100 ||duree <1)
 143   3                    {
 144   4                    commande_correct = 0;
 145   4                  }
 146   3                  else{commande.ACQ_Duree=duree;}
 147   3                  break;
 148   3              }
 149   2              case ' ':// cas d'avancer A
 150   2              {
 151   3                if (epreuve_en_cours == epreuve1){
 152   4                  commande.Etat_Mouvement=Avancer;
 153   4                  // on regarde le param�tre de la vitesse
 154   4                  if (com[2] >= 0x30)
 155   4                  {
 156   5                    for (j=2; j<5;j++)
 157   5                      {
 158   6                        tab[j-2]=com[j];
 159   6                    }
 160   5                    vitesse=conversionangle_positif(tab);
 161   5                  if (vitesse >= 100 ||vitesse <=0)
 162   5                    {
 163   6                      commande_correct = 0;
 164   6                    }
 165   5                  else
 166   5                    {
 167   6                    commande.Vitesse=vitesse;
 168   6                    commande_correct = 1; // nbr 1 pour routage vers le serializer
 169   6      
 170   6                    }}
 171   4                  else{ commande_correct = 1; // nbr 1 pour routage vers le serializer
 172   5                  }
 173   4                }
 174   3                    else {
 175   4                      commande_correct = 2;
 176   4                      strcpy(message_PC_com,"\r\nErreur non epreuve 1\r\n>");}
 177   3                break;
C51 COMPILER V9.51   MAIN                                                                  05/24/2018 14:45:08 PAGE 4   

 178   3              }
 179   2            default:
 180   2              {
 181   3              if (epreuve_en_cours == epreuve1){
 182   4                commande.Etat_Mouvement=Avancer;
 183   4                commande_correct = 1;}
 184   3                else{
 185   4                      commande_correct = 2;
 186   4                      strcpy(message_PC_com,"\r\nErreur non epreuve 1\r\n>");}
 187   3            }
 188   2          }
 189   1          return commande;
 190   1      }
 191          struct COMMANDES traitement_B(char* com, struct COMMANDES commande) // RECULER OK
 192          {
 193   1        char vitesse;
 194   1        char tab[3];
 195   1        int j;
 196   1        commande.Etat_Mouvement=Reculer;
 197   1            if (com[1]==' ')
 198   1              {
 199   2              for (j=2; j<=4;j++)
 200   2              {
 201   3                  tab[j-2]=com[j];
 202   3              }
 203   2              vitesse=conversionangle_positif(tab);
 204   2                if (vitesse >= 100 ||vitesse <0)
 205   2                  {
 206   3                    commande_correct = 0;
 207   3                  }
 208   2                else
 209   2                  {
 210   3                  commande.Vitesse=vitesse;
 211   3                  commande_correct = 1;
 212   3                  }
 213   2              }
 214   1      
 215   1            else {
 216   2                  commande_correct = 1;
 217   2            }
 218   1      
 219   1            return commande;
 220   1      }
 221          struct COMMANDES traitement_C(char* com, struct COMMANDES commande) // pilotage du servomoteur
 222          {
 223   1        signed int angle;
 224   1        unsigned char tab[3];
 225   1        int j=0;
 226   1        switch (com[3])
 227   1        {
 228   2          case 'H':
 229   2          {
 230   3            commande.Etat_Servo=Servo_H;
 231   3            if (com[5]=='A')
 232   3              {
 233   4              for (j=7; j<10;j++)
 234   4                {
 235   5                    tab[j-7]=com[j];
 236   5                }
 237   4              angle=conversionangle_positif(tab);
 238   4                if (angle > 90 ||angle <-90)
 239   4                {
C51 COMPILER V9.51   MAIN                                                                  05/24/2018 14:45:08 PAGE 5   

 240   5                  commande_correct = 0;
 241   5                }
 242   4                else
 243   4                {
 244   5                  commande.Servo_Angle=angle;
 245   5                  commande_correct = 1;
 246   5                }
 247   4            }
 248   3            else
 249   3            {
 250   4              angle=0;
 251   4            }
 252   3            commande.Servo_Angle=angle;
 253   3            break;
 254   3          }
 255   2          case 'V':
 256   2          {
 257   3            commande.Etat_Servo=Servo_V;
 258   3            if (com[5]=='A')
 259   3              {
 260   4              for (j=7; j<10;j++)
 261   4                {
 262   5                    tab[j-7]=com[j];
 263   5                }
 264   4              angle=conversionangle_positif(tab);
 265   4                if (angle > 90 ||angle <-90)
 266   4                {
 267   5                  commande_correct = 0;
 268   5                }
 269   4                else
 270   4                {
 271   5                  commande.Servo_Angle=angle;
 272   5                  commande_correct = 1;
 273   5                }
 274   4            }
 275   3      
 276   3            else
 277   3            {
 278   4              angle=0;
 279   4              commande.Servo_Angle=angle;
 280   4            }
 281   3      
 282   3            break;
 283   3          }
 284   2          default:
 285   2          {
 286   3            commande.Etat_Servo=Servo_H;
 287   3            angle=0;
 288   3            commande.Servo_Angle=angle;
 289   3            break;
 290   3          }
 291   2        }
 292   1        return commande;
 293   1      }
 294          struct COMMANDES traitement_D(char * com, struct COMMANDES commande)// DEBUT DEPREUVE OK
 295          {
 296   1        switch (com[2]) // exemple message:  D 1
 297   1            {
 298   2              case '1': //�preuve 1
 299   2              {
 300   3                commande.Etat_Epreuve=epreuve1;
 301   3                strcpy(message_PC_com, "\r\nInvite de commande 1\r\n>");
C51 COMPILER V9.51   MAIN                                                                  05/24/2018 14:45:08 PAGE 6   

 302   3                epreuve_en_cours = epreuve1;
 303   3                //serOutstring("Invite de commande 1");
 304   3                break;
 305   3      
 306   3              }
 307   2              case '2': //�preuve 2
 308   2              {
 309   3                commande.Etat_Epreuve=epreuve2;
 310   3                strcpy(message_PC_com, "\r\nInvite de commande 2\r\n>");
 311   3                epreuve_en_cours = epreuve2;
 312   3                //serOutstring("Invite de commande 2");
 313   3                break;
 314   3      
 315   3              }
 316   2              case '3': //�preuve 3
 317   2              {
 318   3                commande.Etat_Epreuve=epreuve3;
 319   3                epreuve_en_cours = epreuve3;
 320   3                strcpy(message_PC_com, "\r\nInvite de commande 3\r\n>");
 321   3                //serOutstring("Invite de commande 3");
 322   3                break;
 323   3      
 324   3              }
 325   2              case '4': //�preuve 4
 326   2              {
 327   3                commande.Etat_Epreuve=epreuve4;
 328   3                epreuve_en_cours = epreuve4;
 329   3                strcpy(message_PC_com, "\r\nInvite de commande 4\r\n>");
 330   3                //serOutstring("Invite de commande 4");
 331   3                break;
 332   3      
 333   3              }
 334   2              case '5': //�preuve 5
 335   2              {
 336   3                commande.Etat_Epreuve=epreuve5;
 337   3                epreuve_en_cours = epreuve5;
 338   3                strcpy(message_PC_com, "\r\nInvite de commande 5\r\n>");
 339   3                //serOutstring("Invite de commande 5");
 340   3                break;
 341   3              }
 342   2              case '6': //�preuve 6
 343   2              {
 344   3                commande.Etat_Epreuve=epreuve6;
 345   3                epreuve_en_cours = epreuve6;
 346   3                strcpy(message_PC_com, "\r\nInvite de commande 6\r\n>");
 347   3                //serOutstring("Invite de commande 6");
 348   3                break;
 349   3      
 350   3              }
 351   2              case '7': //�preuve 7
 352   2              {
 353   3                commande.Etat_Epreuve=epreuve7;
 354   3                epreuve_en_cours = epreuve7;
 355   3                strcpy(message_PC_com, "\r\nInvite de commande 7\r\n>");
 356   3                //serOutstring("Invite de commande 7");
 357   3                break;
 358   3              }
 359   2              case '8': //�preuve 8
 360   2              {
 361   3                commande.Etat_Epreuve=epreuve8;
 362   3                epreuve_en_cours = epreuve8;
 363   3                strcpy(message_PC_com, "\r\nInvite de commande 8\r\n>");
C51 COMPILER V9.51   MAIN                                                                  05/24/2018 14:45:08 PAGE 7   

 364   3                //serOutstring("Invite de commande 8");
 365   3                break;
 366   3              }
 367   2              default:
 368   2              {
 369   3              commande.Etat_Epreuve=epreuve1;
 370   3                epreuve_en_cours = epreuve1;
 371   3              strcpy(message_PC_com, "\r\nInvite de commande 1\r\n>");
 372   3              //serOutstring("Invite de commande 1");
 373   3      
 374   3              }
 375   2            }
 376   1            commande_correct = 2;
 377   1            return commande;
 378   1      }
 379          struct COMMANDES traitement_E(struct COMMANDES commande)//FIN DEPREUVE OK
 380          {
 381   1        //serOutstring("Fin de l'�preuve");
 382   1        commande.Etat_Epreuve=Epreuve_non;
 383   1        commande.Etat_Mouvement =Mouvement_non;
 384   1        epreuve_en_cours = Epreuve_non;
 385   1        return commande;
 386   1      }
 387          struct COMMANDES traitement_G(char * com, struct COMMANDES commande) // DEPLACEMENT AVEC ANGLE : OK
 388          {
 389   1          int i=4;
 390   1          int k=0;
 391   1          char coord[10];
 392   1          if (epreuve_en_cours == epreuve1 && com[1]==' ' && com[2]=='X' && com[3]==':')
 393   1          {
 394   2            commande.Etat_Mouvement = Depl_Coord;
 395   2      
 396   2            while(com[i]!= ' ')
 397   2            {
 398   3              coord[k]=com[i];
 399   3              i=i+1;
 400   3              k++;
 401   3            }
 402   2            coord[k]='\0';
 403   2            commande.Coord_X=conv(coord,strlen(coord));
 404   2            i = i+ 3;
 405   2            k=0;
 406   2            while(com[i]!= ' ')
 407   2            {
 408   3              coord[k]=com[i];
 409   3              i=i+1;
 410   3              k=k+1;
 411   3            }
 412   2            coord[i]='\0';
 413   2            commande.Coord_Y=conv(coord,strlen(coord));
 414   2            k=0;
 415   2            i = i+ 3;
 416   2            while(com[i]!= '\0')
 417   2            {
 418   3              coord[k]=com[i];
 419   3              i=i+1;
 420   3              k=k+1;
 421   3            }
 422   2            coord[i-1]='\0';
 423   2            commande.Angle=conv(coord,strlen(coord));
 424   2      
 425   2      
C51 COMPILER V9.51   MAIN                                                                  05/24/2018 14:45:08 PAGE 8   

 426   2          }
 427   1          else
 428   1          {
 429   2            commande_correct=0;
 430   2          }
 431   1      
 432   1      
 433   1            return commande;
 434   1      
 435   1      }
 436          
 437          /*struct COMMANDES traitement_I(char * com, struct COMMANDES commande) // pas encore utilis�
 438          {
 439            // a compl�ter
 440            return commande;
 441          }*/
 442          
 443          struct COMMANDES traitement_L(char * com,struct COMMANDES commande)
 444          {
 445   1        char Lumiere_Intensite;
 446   1        char Lumiere_Duree;
 447   1        char Lumiere_Extinction;
 448   1        char Lumiere_Nbre;
 449   1        unsigned char tab[4];
 450   1        int j;
 451   1      
 452   1        if (com[1]=='S'){
 453   2          commande.Etat_Lumiere=Eteindre;
 454   2        }
 455   1        else{
 456   2          commande.Etat_Lumiere=Allumer;
 457   2          switch(com[2]){
 458   3            case 'I':
 459   3            {
 460   4              for (j=4; j<8;j++){
 461   5                tab[j-4]=com[j];
 462   5              }
 463   4      
 464   4              Lumiere_Intensite = conversioncoord_2(tab);
 465   4              if (Lumiere_Intensite >= 0 && Lumiere_Intensite <= 100){
 466   5                  commande_correct=1;
 467   5                  commande.Lumiere_Intensite=Lumiere_Intensite;
 468   5              }
 469   4              else{
 470   5                  commande_correct=0;
 471   5              }
 472   4              for (j=10; j<13;j++){
 473   5                tab[j-10]=com[j];
 474   5              }
 475   4              
 476   4              Lumiere_Duree = conversioncoord_2(tab);
 477   4              if(Lumiere_Duree >= 1 && Lumiere_Duree <= 99){
 478   5                commande_correct=1;
 479   5                commande.Lumiere_Duree=Lumiere_Duree;
 480   5              }
 481   4              else{
 482   5                commande_correct=0;
 483   5              }
 484   4              for (j=16; j<19;j++){
 485   5                tab[j-16]=com[j];
 486   5              }
 487   4              Lumiere_Extinction =  conversioncoord_2(tab);
C51 COMPILER V9.51   MAIN                                                                  05/24/2018 14:45:08 PAGE 9   

 488   4              if(Lumiere_Extinction>=0 && Lumiere_Extinction<=99){
 489   5                commande_correct=1;
 490   5                commande.Lumiere_Extinction=Lumiere_Extinction;
 491   5              }
 492   4              else{
 493   5                commande_correct=0;
 494   5              }
 495   4              for (j=22; j<25;j++){
 496   5                tab[j-22]=com[j];
 497   5              }
 498   4              Lumiere_Nbre = conversioncoord_2(tab);
 499   4              if(Lumiere_Nbre>=0 && Lumiere_Nbre<=100){
 500   5                commande_correct=1;
 501   5                commande.Lumiere_Nbre=Lumiere_Nbre;
 502   5              }
 503   4              else{
 504   5                commande_correct=0;
 505   5              }
 506   4              break;
 507   4            }
 508   3            
 509   3            
 510   3            default:
 511   3            {
 512   4              commande.Lumiere_Intensite=100;
 513   4              commande.Lumiere_Duree=99;
 514   4              commande.Lumiere_Extinction=0;
 515   4              commande.Lumiere_Nbre=1;
 516   4              commande_correct=1;
 517   4              break;
 518   4            }
 519   3            break;
 520   3          }
 521   2        }
 522   1        return commande;
 523   1      }
 524          
 525          
 526          
 527          
 528          
 529          struct COMMANDES traitement_M(char *com, struct COMMANDES commande)
 530          {
 531   1        int j;
 532   1        char tab[2];
 533   1        char angle;
 534   1        switch(com[1])
 535   1          {
 536   2              case 'I': //MI Mesure de courant
 537   2                commande.Etat_Energie=Mesure_I;
 538   2                break;
 539   2              case 'E': //ME Mesure de l'�nergie
 540   2                commande.Etat_Energie=Mesure_E;
 541   2                break;
 542   2              case 'O': //cas MO
 543   2                switch (com[2])
 544   2                {
 545   3                  case 'U': // cas MOU
 546   3                    commande.A_Obst=Obst_unique;
 547   3                    switch (com[4])
 548   3                    {
 549   4                      case 'D':
C51 COMPILER V9.51   MAIN                                                                  05/24/2018 14:45:08 PAGE 10  

 550   4                        commande.Det=avant_arriere;//avant et arriere
 551   4                        break;
 552   4                      default:
 553   4                        commande.Det=avant;
 554   4                        //avant
 555   4                        break;
 556   4                    }
 557   3                    break;
 558   3                  case 'B': // cas MOB
 559   3                    commande.A_Obst=Obst_balayage;
 560   3                    switch(com[4])
 561   3                    {
 562   4                      case 'A':
 563   4                        commande.Etat_DCT_Obst=oui_360; // d�fault de D
 564   4                        for (j=6; j<8;j++)
 565   4                        {
 566   5                          tab[j-6]=com[j];
 567   5                        }
 568   4                        angle=conversioncoord(tab);
 569   4                        if (angle%5==0){
 570   5                          if(angle>=5 && angle<=45){
 571   6                            commande.DCT_Obst_Resolution=angle;
 572   6                            commande_correct=1;
 573   6                          }
 574   5                        }
 575   4                        else
 576   4                        {
 577   5                          commande_correct=0;
 578   5                        }
 579   4      
 580   4                        break;
 581   4                      case 'D':
 582   4                        commande.Etat_DCT_Obst=oui_180;
 583   4                        if (com[6]=='A')
 584   4                        {
 585   5                          for (j=8; j<10;j++)
 586   5                          {
 587   6                            tab[j-8]=com[j];
 588   6                          }
 589   5                          angle=conversioncoord(tab);
 590   5                          if (angle%5==0){
 591   6                            if(angle>=5 && angle<=45){
 592   7                              commande.DCT_Obst_Resolution=angle;
 593   7                              commande_correct=1;
 594   7                            }
 595   6                          }
 596   5                          else
 597   5                          {
 598   6                            commande_correct=0;
 599   6                          }
 600   5                        }
 601   4      
 602   4                        else
 603   4                        {
 604   5                          commande.DCT_Obst_Resolution=30;
 605   5                        }
 606   4                        break;
 607   4                      default:
 608   4                        commande.Etat_DCT_Obst=oui_360;
 609   4                        commande.DCT_Obst_Resolution=30;
 610   4                        break;
 611   4                    }
C51 COMPILER V9.51   MAIN                                                                  05/24/2018 14:45:08 PAGE 11  

 612   3                    break;
 613   3                  case 'S': // cas MOS
 614   3                    commande.A_Obst=Obst_proche_balayage;
 615   3                    switch(com[4])
 616   3                    {
 617   4                      case 'A':
 618   4                        commande.Etat_DCT_Obst=oui_360; // d�fault de D
 619   4                        for (j=6; j<8;j++)
 620   4                        {
 621   5                          tab[j-6]=com[j];
 622   5                        }
 623   4                        angle=conversioncoord(tab);
 624   4                        if (angle%5==0){
 625   5                          if(angle>=5 && angle<=45){
 626   6                            commande.DCT_Obst_Resolution=angle;
 627   6                            commande_correct=1;
 628   6                          }
 629   5                        }
 630   4                        else
 631   4                        {
 632   5                          commande_correct=0;
 633   5                        }
 634   4      
 635   4                        break;
 636   4                      case 'D':
 637   4                        commande.Etat_DCT_Obst=oui_180;
 638   4                        if (com[6]=='A')
 639   4                        {
 640   5                          for (j=8; j<10;j++)
 641   5                          {
 642   6                            tab[j-8]=com[j];
 643   6                          }
 644   5                          angle=conversioncoord(tab);
 645   5                          if (angle%5==0){
 646   6                            if(angle>=5 && angle<=45){
 647   7                              commande.DCT_Obst_Resolution=angle;
 648   7                              commande_correct=1;
 649   7                            }
 650   6                          }
 651   5                          else
 652   5                          {
 653   6                            commande_correct=0;
 654   6                          }
 655   5                        }
 656   4      
 657   4                        else
 658   4                        {
 659   5                          commande.DCT_Obst_Resolution=30;
 660   5                        }
 661   4                        break;
 662   4                      default:
 663   4                        commande.Etat_DCT_Obst=oui_360;
 664   4                        commande.DCT_Obst_Resolution=30;
 665   4                        break;
 666   4                    }
 667   3                    break;
 668   3                  default:break;
 669   3                }
 670   2                break;
 671   2              }
 672   1            return commande;
 673   1      }
C51 COMPILER V9.51   MAIN                                                                  05/24/2018 14:45:08 PAGE 12  

 674          /*struct COMMANDES traitement_P(char *com, struct COMMANDES commande) // PAS ENCORE UTILISE (POS)
 675          {
 676            // a compl�ter
 677            return commande;
 678          }*/
 679          struct COMMANDES traitement_Q(struct COMMANDES commande) //ARRET DURGENCE
 680          {
 681   1        //serOutstring("arret d'urgence");
 682   1        commande.Etat_Epreuve=Stop_Urgence;
 683   1        return commande;
 684   1      }
 685          struct COMMANDES traitement_R(char * com, struct COMMANDES commande)// DIFFERENTES ROTATIONS OK
 686          {
 687   1        signed int angle;
 688   1        unsigned char tab[3];
 689   1        int j;
 690   1        switch (com[1])
 691   1            {
 692   2            case 'D': // si on recoit RD
 693   2            {
 694   3              commande.Etat_Mouvement=Rot_90D;
 695   3              break;
 696   3            }
 697   2            case 'G': //Si on recoit RG
 698   2            {
 699   3              commande.Etat_Mouvement=Rot_90G;
 700   3              break;
 701   3            }
 702   2            case 'C':// si on recoit RC
 703   2            {
 704   3              if (com[3]== 'D')
 705   3              {
 706   4                commande.Etat_Mouvement=Rot_180D;
 707   4                break;
 708   4              }
 709   3              if (com[3]== 'G')
 710   3              {
 711   4                commande.Etat_Mouvement=Rot_180G;
 712   4                break;
 713   4              }
 714   3            }
 715   2            case 'A': // on recoit RA
 716   2            {
 717   3              switch (com[3])
 718   3              {
 719   4                case 'D':
 720   4                {
 721   5                  commande.Etat_Mouvement=Rot_AngD;
 722   5                  for (j=5; j<=7;j++)
 723   5                  {
 724   6                      tab[j-5]=com[j];
 725   6                  }
 726   5                  angle=conversionangle_positif(tab);
 727   5                  commande.Angle=angle;
 728   5                  break;
 729   5                }
 730   4                case 'G':
 731   4                {
 732   5                  commande.Etat_Mouvement=Rot_AngG;
 733   5                  for (j=5; j<=7;j++)
 734   5                  {
 735   6                      tab[j-5]=com[j];
C51 COMPILER V9.51   MAIN                                                                  05/24/2018 14:45:08 PAGE 13  

 736   6                  }
 737   5                  angle=conversionangle_positif(tab);
 738   5                  commande.Angle=angle;
 739   5                  break;
 740   5                }
 741   4                default :
 742   4                {
 743   5                  commande.Etat_Mouvement=Rot_AngD;
 744   5                  angle=90;
 745   5                  commande.Angle=angle;
 746   5                  break;
 747   5                }
 748   4            }
 749   3            break;
 750   3          }
 751   2            default:
 752   2            {
 753   3              break;
 754   3            }
 755   2          }
 756   1          return commande;
 757   1      }
 758          struct COMMANDES traitement_S(char * com, struct COMMANDES commande/*,char f_b, char t_son, char t_silence
             -, char bip_b*/) // STOPPER
 759          {
 760   1        int i;
 761   1        char f_b=6;
 762   1        char t_son=25;
 763   1        char t_silence=50;
 764   1        char bip_b=3;
 765   1        char tab[2];
 766   1        char frequence;
 767   1        char duree_son;
 768   1        char duree_silence;
 769   1        char nombre_Bips;
 770   1      
 771   1        if( com[1]=='D')
 772   1        {
 773   2          commande.son=emission;
 774   2            if(com[3]=='F')
 775   2            {
 776   3              for (i=5; i<7;i++)
 777   3              {
 778   4                tab[i-5]=com[i];
 779   4              }
 780   3              frequence=conversioncoord(tab);
 781   3              if (frequence >99 ||frequence <1)
 782   3              {
 783   4                  commande_correct = 0;
 784   4              }
 785   3              else
 786   3              {
 787   4                commande.frequence=frequence;
 788   4                commande_correct = 1;
 789   4              }
 790   3              for (i=10; i<12;i++)
 791   3              {
 792   4                tab[i-10]=com[i];
 793   4              }
 794   3              duree_son=conversioncoord(tab);
 795   3              if (duree_son >99 ||duree_son <1)
 796   3              {
C51 COMPILER V9.51   MAIN                                                                  05/24/2018 14:45:08 PAGE 14  

 797   4                  commande_correct = 0;
 798   4              }
 799   3              else
 800   3              {
 801   4                commande.duree_son=duree_son;
 802   4                commande_correct = 1;
 803   4              }
 804   3              for (i=15; i<17;i++)
 805   3              {
 806   4                tab[i-15]=com[i];
 807   4              }
 808   3              duree_silence=conversioncoord(tab);
 809   3              if (duree_silence >99 ||duree_silence <1)
 810   3              {
 811   4                  commande_correct = 0;
 812   4              }
 813   3              else
 814   3              {
 815   4                commande.duree_silence=duree_silence;
 816   4                commande_correct = 1;
 817   4              }
 818   3              for (i=20; i<22;i++)
 819   3              {
 820   4                tab[i-20]=com[i];
 821   4              }
 822   3              nombre_Bips=conversioncoord(tab);
 823   3              if (nombre_Bips >99 ||nombre_Bips <1)
 824   3              {
 825   4                  commande_correct = 0;
 826   4              }
 827   3              else
 828   3              {
 829   4                commande.nombre_Bips=nombre_Bips;
 830   4                commande_correct = 1;
 831   4              }
 832   3      
 833   3            }
 834   2            else
 835   2            {
 836   3              commande.frequence=f_b;               // d�finit par le code fr�quence allant de 1 a 99 (mais defini de 1
             - a 21)
 837   3              commande.duree_son=t_son;                 // dur�e du signal sonore
 838   3              commande.duree_silence=t_silence;             // duree du silence
 839   3              commande.nombre_Bips=bip_b;             // nombre de bips
 840   3            }
 841   2        }
 842   1        else
 843   1        {
 844   2          commande.Etat_Mouvement=Stopper;
 845   2        }
 846   1        return commande;
 847   1      }
 848          struct COMMANDES traitement_T(char * com, struct COMMANDES commande) // VITESSE A REGLER
 849          {
 850   1        char vitesse;
 851   1        char tab[3];
 852   1        int j;
 853   1        // on regarde le param�tre de la vitesse
 854   1      
 855   1        for (j=3; j<=5;j++)
 856   1        {
 857   2            tab[j-3]=com[j];
C51 COMPILER V9.51   MAIN                                                                  05/24/2018 14:45:08 PAGE 15  

 858   2        }
 859   1        vitesse=conversionangle_positif(tab);
 860   1        j = ((int)vitesse& 0x00FF);
 861   1        if (j >= 100){
 862   2            commande_correct = 0;}
 863   1        else {
 864   2            vitesse_par_defaut=(vitesse & 0x00FF);
 865   2            strcpy(message_PC_com,"\r\n>");
 866   2            commande_correct = 2;
 867   2        }
 868   1        return commande;
 869   1      
 870   1      }
 871          
 872          struct COMMANDES Message (char * com/*, char f_b,char t_son,char t_silence,char bip_b*/){
 873   1      //  char tabcoordx[2];
 874   1      //  char tabcoordy[2];
 875   1      //  char tabangle[2];
 876   1      //  signed char coordx;
 877   1      //  signed char coordy;
 878   1      //  char angle;
 879   1      //  int cpt=0;
 880   1        //a modifier
 881   1      
 882   1      
 883   1      
 884   1        struct COMMANDES commande;
 885   1        commande.Etat_Epreuve = Epreuve_non;
 886   1        commande.Vitesse = vitesse_par_defaut;
 887   1        commande.Etat_Mouvement = Mouvement_non;
 888   1        commande.Etat_ACQ_Son = ACQ_non;
 889   1        commande.A_Obst = Non_obst;
 890   1        commande.Etat_DCT_Obst = DCT_non;
 891   1        commande.Etat_Lumiere = Lumiere_non;
 892   1        commande.Etat_Servo = Servo_non;
 893   1        commande.Etat_Energie = Energie_non;
 894   1        commande.Etat_Photo = Photo_non;
 895   1        commande.Etat_Position = Position_non;
 896   1        commande.son=non_emission;
 897   1      
 898   1          switch (com[0])
 899   1          {
 900   2          case 'A':// si on recoit un A AVANCER OU DUREE DAQUISITION FIXEE
 901   2          {
 902   3            commande=traitement_A(com,commande);
 903   3            break;
 904   3          }
 905   2          case 'T':// si on recoit un TV Reglage de la vitesse seulement
 906   2          {
 907   3            commande=traitement_T(com,commande);
 908   3            break;
 909   3          }
 910   2          case 'D':// si on recoit un D (D�but de l'epreuve)
 911   2          {
 912   3            commande=traitement_D(com,commande);
 913   3            break;
 914   3          }
 915   2          case 'E':// si on recoit un E (fin de l'epreuve)
 916   2          {
 917   3            commande=traitement_E(commande);
 918   3            break;
 919   3      
C51 COMPILER V9.51   MAIN                                                                  05/24/2018 14:45:08 PAGE 16  

 920   3          }
 921   2          case 'Q':// si on recoit un Q (arret d'urgence)
 922   2          {
 923   3            commande=traitement_Q(commande);
 924   3            break;
 925   3      
 926   3          }
 927   2          case 'L':// si on recoit un M (mesure et autre)
 928   2          {
 929   3            commande=traitement_L(com,commande);
 930   3            break;
 931   3          }
 932   2          case 'M':// si on recoit un M (mesure et autre)
 933   2          {
 934   3            commande=traitement_M(com,commande);
 935   3            break;
 936   3          }
 937   2          case 'I':// si on recoit un IPO (I)
 938   2          {
 939   3            // a faire
 940   3            //commande=traitement_I(com,commande);
 941   3            break;
 942   3          }
 943   2          case 'P':// si on recoit un POS
 944   2          {
 945   3            //commande=traitement_P(com,commande);
 946   3            //envoie de information
 947   3            break;
 948   3      
 949   3          }
 950   2          case 'B': //si on recoit un B RECULER
 951   2          {
 952   3            commande=traitement_B(com,commande);
 953   3            break;
 954   3          }
 955   2          case 'S': // si on recoit S
 956   2          {
 957   3            commande=traitement_S(com, commande/*,f_b, t_son, t_silence, bip_b*/);
 958   3      
 959   3            break;
 960   3          }
 961   2          case 'G': // si on recoit G
 962   2          {
 963   3            commande=traitement_G(com,commande);
 964   3            break;
 965   3          }
 966   2      
 967   2          case 'R': //Si On recoit R ROTATION
 968   2          {
 969   3            commande=traitement_R(com,commande);
 970   3            break;
 971   3          }
 972   2          case 'C':
 973   2            commande=traitement_C(com,commande);
 974   2            break;
 975   2          default:
 976   2          {
 977   3          commande_correct = 0;
 978   3          }
 979   2      }
 980   1      //}
 981   1      return commande;
C51 COMPILER V9.51   MAIN                                                                  05/24/2018 14:45:08 PAGE 17  

 982   1      }
 983          
 984          
 985          
 986          void main (void)
 987          {
 988   1      //D�claration des variables
 989   1        //struct COMMANDES_SERIALIZER commande_serializer;
 990   1        struct COMMANDES commande;
 991   1        char message_s[50] = {0};
 992   1        char mess[6] = {0};
 993   1        char echo[3] = {0};
 994   1        char com[50] = {0};
 995   1      //  char nbr[10];
 996   1        char a;
 997   1        char i =0;
 998   1        int b = 0;
 999   1        unsigned char code_err = 0;
1000   1      
1001   1        //a modifier
1002   1        char f_b=6;
1003   1        char t_son=25;
1004   1        char t_silence=50;
1005   1        char bip_b=3;
1006   1      
1007   1        EA=0;
1008   1        Init_Device();  // Initialisation du microcontr�leur
1009   1        Config_Timer2();
1010   1        Config_timer0();
1011   1        Config_Timer3();
1012   1        Config_SPI_MASTER();
1013   1        CFG_VREF();
1014   1        CFG_ADC0();
1015   1        CFG_Clock_UART();
1016   1        cfg_UART0_mode1();
1017   1        init_Serial_Buffer();
1018   1        init_Serial_Buffer1();
1019   1        CFG_UART1();
1020   1        NSS_slave = 1;
1021   1        TR2 = 0;
1022   1        energie = 0;
1023   1        EA=1;
1024   1      
1025   1        serOutstring("\n\rDemarrage robot\n\r>");
1026   1      // a commenter si le robot est d�ja allum� avant le lancement du code
1027   1      // Pour recevoir le message de d�marrage du serializer
1028   1      /*  do{
1029   1            a=serInchar1();
1030   1            echo[0] = a;
1031   1            echo[1] = '\0';
1032   1            serOutstring(echo);
1033   1            memset(echo,0,strlen(echo));
1034   1          }while(a!=0x3E);
1035   1      */
1036   1        while(1){
1037   2      
1038   2          memset(message_s,0,sizeof(message_s));
1039   2          memset(mess, 0, strlen(mess));
1040   2          memset(message_PC_com, 0, strlen(message_PC_com));
1041   2      
1042   2          commande_correct =1;
1043   2      
C51 COMPILER V9.51   MAIN                                                                  05/24/2018 14:45:08 PAGE 18  

1044   2          i=0;
1045   2          a=0;
1046   2          memset(com, 0, 50);
1047   2          do{
1048   3            a=serInchar();
1049   3            echo[0] = a;
1050   3            echo[1] = '\0';
1051   3            serOutstring(echo);
1052   3            memset(echo,0,strlen(echo));
1053   3            if (a!=0x00)
1054   3              {
1055   4              com[i]=a;
1056   4              i=i+1;
1057   4              }
1058   3            }while(a!=0x0D); //Commenté pour les tests avec le simulateur
1059   2      
1060   2          //strcpy(com,"CS V A:-45");
1061   2          //strcpy(com,"SD F:12 P:50 W:60 B:05");
1062   2          //strcpy(com,"MOB");
1063   2          //strcpy(com,"L I:100 D:007 E:006 N:090");
1064   2          //strcpy(com,"L");
1065   2            
1066   2          commande = Message(com);
1067   2            
1068   2          if (commande_correct == 1){
1069   3              fonctionRoutage(commande);
1070   3          }
1071   2          if (commande_correct == 2){
1072   3            serOutstring(message_PC_com); // si erreur
1073   3          }
1074   2          if(commande_correct == 0){
1075   3            strcpy(mess, "\n\r#\n\r>");
1076   3            serOutstring(mess); // si erreur
1077   3          }
1078   2        //serOutstring(message_PC_com); // si erreur
1079   2        }
1080   1      
1081   1      }
1082          
1083          void ISR_Timer2 (void) interrupt 5 {
1084   1        TF2 = 0; //Remise � '0' du flag d'overflow
1085   1        PWM_servo=!PWM_servo; //On envoie le signal PWM au servomoteur
1086   1      }
1087          
1088          void ISR_Timer3 (void) interrupt 14 {
1089   1        TMR3CN &= 0x04; //Remise � '0' du flag d'overflow
1090   1        courant = Courant_ADC();
1091   1        energie += 9.6*courant*0.001*0.035;
1092   1        
1093   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   6108    ----
   CONSTANT SIZE    =    375    ----
   XDATA SIZE       =     61     764
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
