C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:46:44 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe main.c LARGE BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <c8051f020.h>
   2          #include <string.h>
   3          #include <stdio.h>
   4          #include <intrins.h>
   5          
   6          #include "Declarations_GPIO.h"
   7          #include "Config_Globale.h"
   8          #include "Timers.h"
   9          #include "Servomoteur_Horizontal.h"
  10          #include "ultrason.h"
  11          #include "Config_SPI.h"
  12          #include "Transmission_SPI.h"
  13          #include "Config_ADC.h"
  14          #include "FO_M1_Structures_COMMANDES_INFORMATIONS_CentraleDeCommande.h"
  15          #include "UART0_RingBuffer_lib.h"
  16          #include "ConfigUART1.h"
  17          #include "UART0_RingBuffer_lib.h"
  18          #include "Fonctions_cote_serializer.h"
  19          #include "Lien_Structure_commande.h"
  20          #include "Mesure_courant.h"
  21          
  22          #ifndef CFG_Globale
  23            #define CFG_Globale
  24            #include "CFG_Globale.h"
  25          #endif
  26          
  27          
  28          //------------------------------------------------------------------------------------
  29          // D�clarations des variables globales
  30          //------------------------------------------------------------------------------------
  31          int vitesse_par_defaut = 10;
  32          char message_PC_com[50] = {0};
  33          enum Epreuve epreuve_en_cours = Epreuve_non;
  34          int commande_correct = 0;
  35          double energie = 0;
  36          unsigned int courant = 0;
  37          
  38          char conversioncoord (unsigned char tableau[2]){
  39   1        int dizaine=0;
  40   1        int unite=0;
  41   1        char valeur;
  42   1        
  43   1        dizaine= (tableau[0]-'0')*10;
  44   1        unite= (tableau[1]-'0');
  45   1      
  46   1        valeur=dizaine+unite;
  47   1        return valeur ;
  48   1      }
  49          
  50          char conversioncoord_2 (unsigned char tableau[3]){
  51   1        int dizaine=0;
  52   1        int unite=0;
  53   1        int centaine = 0;
  54   1        char valeur;
  55   1        
C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:46:44 PAGE 2   

  56   1        centaine = (tableau[0]-'0')*100;
  57   1        dizaine= (tableau[1]-'0')*10;
  58   1        unite= (tableau[2]-'0');
  59   1      
  60   1        valeur=centaine+dizaine+unite;
  61   1        return valeur ;
  62   1      }
  63          
  64          /*char conversionvitesse (unsigned char tableau[3]){
  65            int centaine=0;
  66            int dizaine=0;
  67            int unite=0;
  68            char valeur;
  69          
  70            centaine= (tableau[0]-'0')*100;
  71            dizaine= (tableau[1]-'0')*10;
  72            unite= (tableau[2]-'0');
  73          
  74            valeur= centaine+dizaine+unite;
  75            return valeur ;
  76          }*/
  77          
  78          signed int conv(char* nbr, int taille)
  79          {
  80   1        int k=0;
  81   1        double t1 = 0;
  82   1        signed int ret=0;
  83   1        int numero=0;
  84   1      
  85   1        if(nbr[0]=='-')
  86   1        {
  87   2          for(k=1;k<taille;k++)
  88   2          {
  89   3            numero=nbr[k]-'0';
  90   3            t1 = pow(10,taille-1-k);
  91   3            numero = numero*ceil(pow(10,taille-1-k));
  92   3            ret+=numero;
  93   3          }
  94   2          ret=-1*ret;
  95   2        }
  96   1        else
  97   1        {
  98   2          for(k=0;k<taille;k++)
  99   2          {
 100   3            numero=(nbr[k]-'0')*ceil(pow(10,taille-1-k));
 101   3            ret+=numero;
 102   3          }
 103   2        }
 104   1        return ret;
 105   1      }
 106          signed int conversionangle_positif (unsigned char tableau[3]){
 107   1        signed int centaine=0;
 108   1        signed int dizaine=0;
 109   1        signed int unite=0;
 110   1        signed int valeur;
 111   1      
 112   1        if (tableau[0] == '-') {
 113   2          dizaine= (tableau[1]-'0')*10;
 114   2          unite= (tableau[2]-'0');
 115   2          valeur = -1* (dizaine + unite);
 116   2        }
 117   1        else {
C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:46:44 PAGE 3   

 118   2          centaine= (tableau[0]-'0')*100;
 119   2          dizaine= (tableau[1]-'0')*10;
 120   2          unite= (tableau[2]-'0');
 121   2          valeur= centaine+dizaine+unite;
 122   2        }
 123   1        return valeur ;
 124   1      }
 125          
 126          struct COMMANDES traitement_A(char * com, struct COMMANDES commande){ // traitement lorsque la premi�re 
             -lettre est A (AVANCER A DUREE DAQUISITION) AVANCER OK
 127   1        char vitesse;
 128   1        char tab[3];
 129   1        int j;
 130   1        char duree;
 131   1      
 132   1        switch (com[1]) //AJOUTER LA DUREE
 133   1            {
 134   2              case 'S': // cas ASS (Dur�e)
 135   2                {
 136   3                  commande_correct = 0; //TODO commande_correct = nbr pour aquisition signal
 137   3                  for (j=4; j<7;j++)
 138   3                    {
 139   4                    tab[j-4]=com[j];
 140   4                  }
 141   3                  duree=conversionangle_positif(tab);
 142   3                  if (duree >= 100 ||duree <1)
 143   3                    {
 144   4                    commande_correct = 0;
 145   4                  }
 146   3                  else{commande.ACQ_Duree=duree;}
 147   3                  break;
 148   3              }
 149   2              case ' ':// cas d'avancer A
 150   2              {
 151   3                if (epreuve_en_cours == epreuve1){
 152   4                  commande.Etat_Mouvement=Avancer;
 153   4                  // on regarde le param�tre de la vitesse
 154   4                  if (com[2] >= 0x30)
 155   4                  {
 156   5                    for (j=2; j<5;j++)
 157   5                      {
 158   6                        tab[j-2]=com[j];
 159   6                    }
 160   5                    vitesse=conversionangle_positif(tab);
 161   5                  if (vitesse >= 100 ||vitesse <=0)
 162   5                    {
 163   6                      commande_correct = 0;
 164   6                    }
 165   5                  else
 166   5                    {
 167   6                    commande.Vitesse=vitesse;
 168   6                    commande_correct = 1; // nbr 1 pour routage vers le serializer
 169   6      
 170   6                    }}
 171   4                  else{ commande_correct = 1; // nbr 1 pour routage vers le serializer
 172   5                  }
 173   4                }
 174   3                    else {
 175   4                      commande_correct = 2;
 176   4                      strcpy(message_PC_com,"\r\nErreur non epreuve 1\r\n>");}
 177   3                break;
 178   3              }
C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:46:44 PAGE 4   

 179   2            default:
 180   2              {
 181   3              if (epreuve_en_cours == epreuve1){
 182   4                commande.Etat_Mouvement=Avancer;
 183   4                commande_correct = 1;}
 184   3                else{
 185   4                      commande_correct = 2;
 186   4                      strcpy(message_PC_com,"\r\nErreur non epreuve 1\r\n>");}
 187   3            }
 188   2          }
 189   1          return commande;
 190   1      }
 191          struct COMMANDES traitement_B(char* com, struct COMMANDES commande) // RECULER OK
 192          {
 193   1        char vitesse;
 194   1        char tab[3];
 195   1        int j;
 196   1        commande.Etat_Mouvement=Reculer;
 197   1            if (com[1]==' ')
 198   1              {
 199   2              for (j=2; j<=4;j++)
 200   2              {
 201   3                  tab[j-2]=com[j];
 202   3              }
 203   2              vitesse=conversionangle_positif(tab);
 204   2                if (vitesse >= 100 ||vitesse <0)
 205   2                  {
 206   3                    commande_correct = 0;
 207   3                  }
 208   2                else
 209   2                  {
 210   3                  commande.Vitesse=vitesse;
 211   3                  commande_correct = 1;
 212   3                  }
 213   2              }
 214   1      
 215   1            else {
 216   2                  commande_correct = 1;
 217   2            }
 218   1      
 219   1            return commande;
 220   1      }
 221          struct COMMANDES traitement_C(char* com, struct COMMANDES commande) // pilotage du servomoteur
 222          {
 223   1        signed int angle;
 224   1        unsigned char tab[3];
 225   1        int j=0;
 226   1        switch (com[3])
 227   1        {
 228   2          case 'H':
 229   2          {
 230   3            commande.Etat_Servo=Servo_H;
 231   3            if (com[5]=='A')
 232   3              {
 233   4              for (j=7; j<10;j++)
 234   4                {
 235   5                    tab[j-7]=com[j];
 236   5                }
 237   4              angle=conversionangle_positif(tab);
 238   4                if (angle > 90 ||angle <-90)
 239   4                {
 240   5                  commande_correct = 0;
C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:46:44 PAGE 5   

 241   5                }
 242   4                else
 243   4                {
 244   5                  commande.Servo_Angle=angle;
 245   5                  commande_correct = 1;
 246   5                }
 247   4            }
 248   3            else
 249   3            {
 250   4              angle=0;
 251   4            }
 252   3            commande.Servo_Angle=angle;
 253   3            break;
 254   3          }
 255   2          case 'V':
 256   2          {
 257   3            commande.Etat_Servo=Servo_V;
 258   3            if (com[5]=='A')
 259   3              {
 260   4              for (j=7; j<10;j++)
 261   4                {
 262   5                    tab[j-7]=com[j];
 263   5                }
 264   4              angle=conversionangle_positif(tab);
 265   4                if (angle > 90 ||angle <-90)
 266   4                {
 267   5                  commande_correct = 0;
 268   5                }
 269   4                else
 270   4                {
 271   5                  commande.Servo_Angle=angle;
 272   5                  commande_correct = 1;
 273   5                }
 274   4            }
 275   3      
 276   3            else
 277   3            {
 278   4              angle=0;
 279   4              commande.Servo_Angle=angle;
 280   4            }
 281   3      
 282   3            break;
 283   3          }
 284   2          default:
 285   2          {
 286   3            commande.Etat_Servo=Servo_H;
 287   3            angle=0;
 288   3            commande.Servo_Angle=angle;
 289   3            break;
 290   3          }
 291   2        }
 292   1        return commande;
 293   1      }
 294          struct COMMANDES traitement_D(char * com, struct COMMANDES commande)// DEBUT DEPREUVE OK
 295          {
 296   1        switch (com[2]) // exemple message:  D 1
 297   1            {
 298   2              case '1': //�preuve 1
 299   2              {
 300   3                commande.Etat_Epreuve=epreuve1;
 301   3                strcpy(message_PC_com, "\r\nInvite de commande 1\r\n>");
 302   3                epreuve_en_cours = epreuve1;
C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:46:44 PAGE 6   

 303   3                //serOutstring("Invite de commande 1");
 304   3                break;
 305   3      
 306   3              }
 307   2              case '2': //�preuve 2
 308   2              {
 309   3                commande.Etat_Epreuve=epreuve2;
 310   3                strcpy(message_PC_com, "\r\nInvite de commande 2\r\n>");
 311   3                epreuve_en_cours = epreuve2;
 312   3                //serOutstring("Invite de commande 2");
 313   3                break;
 314   3      
 315   3              }
 316   2              case '3': //�preuve 3
 317   2              {
 318   3                commande.Etat_Epreuve=epreuve3;
 319   3                epreuve_en_cours = epreuve3;
 320   3                strcpy(message_PC_com, "\r\nInvite de commande 3\r\n>");
 321   3                //serOutstring("Invite de commande 3");
 322   3                break;
 323   3      
 324   3              }
 325   2              case '4': //�preuve 4
 326   2              {
 327   3                commande.Etat_Epreuve=epreuve4;
 328   3                epreuve_en_cours = epreuve4;
 329   3                strcpy(message_PC_com, "\r\nInvite de commande 4\r\n>");
 330   3                //serOutstring("Invite de commande 4");
 331   3                break;
 332   3      
 333   3              }
 334   2              case '5': //�preuve 5
 335   2              {
 336   3                commande.Etat_Epreuve=epreuve5;
 337   3                epreuve_en_cours = epreuve5;
 338   3                strcpy(message_PC_com, "\r\nInvite de commande 5\r\n>");
 339   3                //serOutstring("Invite de commande 5");
 340   3                break;
 341   3              }
 342   2              case '6': //�preuve 6
 343   2              {
 344   3                commande.Etat_Epreuve=epreuve6;
 345   3                epreuve_en_cours = epreuve6;
 346   3                strcpy(message_PC_com, "\r\nInvite de commande 6\r\n>");
 347   3                //serOutstring("Invite de commande 6");
 348   3                break;
 349   3      
 350   3              }
 351   2              case '7': //�preuve 7
 352   2              {
 353   3                commande.Etat_Epreuve=epreuve7;
 354   3                epreuve_en_cours = epreuve7;
 355   3                strcpy(message_PC_com, "\r\nInvite de commande 7\r\n>");
 356   3                //serOutstring("Invite de commande 7");
 357   3                break;
 358   3              }
 359   2              case '8': //�preuve 8
 360   2              {
 361   3                commande.Etat_Epreuve=epreuve8;
 362   3                epreuve_en_cours = epreuve8;
 363   3                strcpy(message_PC_com, "\r\nInvite de commande 8\r\n>");
 364   3                //serOutstring("Invite de commande 8");
C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:46:44 PAGE 7   

 365   3                break;
 366   3              }
 367   2              default:
 368   2              {
 369   3              commande.Etat_Epreuve=epreuve1;
 370   3                epreuve_en_cours = epreuve1;
 371   3              strcpy(message_PC_com, "\r\nInvite de commande 1\r\n>");
 372   3              //serOutstring("Invite de commande 1");
 373   3      
 374   3              }
 375   2            }
 376   1            commande_correct = 2;
 377   1            return commande;
 378   1      }
 379          struct COMMANDES traitement_E(struct COMMANDES commande)//FIN DEPREUVE OK
 380          {
 381   1        //serOutstring("Fin de l'�preuve");
 382   1        commande.Etat_Epreuve=Epreuve_non;
 383   1        commande.Etat_Mouvement =Mouvement_non;
 384   1        epreuve_en_cours = Epreuve_non;
 385   1        return commande;
 386   1      }
 387          struct COMMANDES traitement_G(char * com, struct COMMANDES commande) // DEPLACEMENT AVEC ANGLE : OK
 388          {
 389   1          int i=4;
 390   1          int k=0;
 391   1          char coord[10];
 392   1          if (epreuve_en_cours == epreuve1 && com[1]==' ' && com[2]=='X' && com[3]==':')
 393   1          {
 394   2            commande.Etat_Mouvement = Depl_Coord;
 395   2      
 396   2            while(com[i]!= ' ')
 397   2            {
 398   3              coord[k]=com[i];
 399   3              i=i+1;
 400   3              k++;
 401   3            }
 402   2            coord[k]='\0';
 403   2            commande.Coord_X=conv(coord,strlen(coord));
 404   2            commande_correct=1;
 405   2      
 406   2      
 407   2      
 408   2          }
 409   1          else
 410   1          {
 411   2            commande_correct=0;
 412   2          }
 413   1      
 414   1      
 415   1            return commande;
 416   1      
 417   1      }
 418          
 419          /*struct COMMANDES traitement_I(char * com, struct COMMANDES commande) // pas encore utilis�
 420          {
 421            // a compl�ter
 422            return commande;
 423          }*/
 424          
 425          struct COMMANDES traitement_L(char * com,struct COMMANDES commande)
 426          {
C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:46:44 PAGE 8   

 427   1        char Lumiere_Intensite;
 428   1        char Lumiere_Duree;
 429   1        char Lumiere_Extinction;
 430   1        char Lumiere_Nbre;
 431   1        unsigned char tab[4];
 432   1        int j;
 433   1      
 434   1        if (com[1]=='S'){
 435   2          commande.Etat_Lumiere=Eteindre;
 436   2        }
 437   1        else{
 438   2          commande.Etat_Lumiere=Allumer;
 439   2          switch(com[2]){
 440   3            case 'I':
 441   3            {
 442   4              for (j=4; j<8;j++){
 443   5                tab[j-4]=com[j];
 444   5              }
 445   4      
 446   4              Lumiere_Intensite = conversioncoord_2(tab);
 447   4              if (Lumiere_Intensite >= 0 & Lumiere_Intensite <= 100){
 448   5                  commande_correct=1;
 449   5                  commande.Lumiere_Intensite=Lumiere_Intensite;
 450   5              }
 451   4              else{
 452   5                  commande_correct=0;
 453   5              }
 454   4              for (j=10; j<13;j++){
 455   5                tab[j-10]=com[j];
 456   5              }
 457   4              
 458   4              Lumiere_Duree = conversioncoord_2(tab);
 459   4              if(Lumiere_Duree >= 1 && Lumiere_Duree <= 99){
 460   5                commande_correct=1;
 461   5                commande.Lumiere_Duree=Lumiere_Duree;
 462   5              }
 463   4              else{
 464   5                commande_correct=0;
 465   5              }
 466   4              for (j=16; j<19;j++){
 467   5                tab[j-16]=com[j];
 468   5              }
 469   4              Lumiere_Extinction =  conversioncoord_2(tab);
 470   4              if(Lumiere_Extinction>=0 && Lumiere_Extinction<=99){
 471   5                commande_correct=1;
 472   5                commande.Lumiere_Extinction=Lumiere_Extinction;
 473   5              }
 474   4              else{
 475   5                commande_correct=0;
 476   5              }
 477   4              for (j=22; j<25;j++){
 478   5                tab[j-22]=com[j];
 479   5              }
 480   4              Lumiere_Nbre = conversioncoord_2(tab);
 481   4              if(Lumiere_Nbre>=0 && Lumiere_Nbre<=100){
 482   5                commande_correct=1;
 483   5                commande.Lumiere_Nbre=Lumiere_Nbre;
 484   5              }
 485   4              else{
 486   5                commande_correct=0;
 487   5              }
 488   4              break;
C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:46:44 PAGE 9   

 489   4            }
 490   3            
 491   3            
 492   3            default:
 493   3            {
 494   4              commande.Lumiere_Intensite=100;
 495   4              commande.Lumiere_Nbre=1;
 496   4              commande.Lumiere_Extinction=0;
 497   4              commande.Lumiere_Duree=99;
 498   4              commande_correct=1;
 499   4              break;
 500   4            }
 501   3            break;
 502   3          }
 503   2        }
 504   1        return commande;
 505   1      }
 506          
 507          
 508          
 509          
 510          
 511          struct COMMANDES traitement_M(char *com, struct COMMANDES commande)
 512          {
 513   1        int j;
 514   1        char tab[2];
 515   1        char angle;
 516   1        switch(com[1])
 517   1          {
 518   2              case 'I': //MI Mesure de courant
 519   2                commande.Etat_Energie=Mesure_I;
 520   2                break;
 521   2              case 'E': //ME Mesure de l'�nergie
 522   2                commande.Etat_Energie=Mesure_E;
 523   2                break;
 524   2              case 'O': //cas MO
 525   2                switch (com[2])
 526   2                {
 527   3                  case 'U': // cas MOU
 528   3                    commande.A_Obst=Obst_unique;
 529   3                    switch (com[4])
 530   3                    {
 531   4                      case 'D':
 532   4                        commande.Det=avant_arriere;//avant et arriere
 533   4                        break;
 534   4                      default:
 535   4                        commande.Det=avant;
 536   4                        //avant
 537   4                        break;
 538   4                    }
 539   3                    break;
 540   3                  case 'B': // cas MOB
 541   3                    commande.A_Obst=Obst_balayage;
 542   3                    switch(com[4])
 543   3                    {
 544   4                      case 'A':
 545   4                        commande.Etat_DCT_Obst=oui_360; // d�fault de D
 546   4                        for (j=6; j<8;j++)
 547   4                        {
 548   5                          tab[j-6]=com[j];
 549   5                        }
 550   4                        angle=conversioncoord(tab);
C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:46:44 PAGE 10  

 551   4                        if (angle%5==0){
 552   5                          if(angle>=5 && angle<=45){
 553   6                            commande.DCT_Obst_Resolution=angle;
 554   6                            commande_correct=1;
 555   6                          }
 556   5                        }
 557   4                        else
 558   4                        {
 559   5                          commande_correct=0;
 560   5                        }
 561   4      
 562   4                        break;
 563   4                      case 'D':
 564   4                        commande.Etat_DCT_Obst=oui_180;
 565   4                        if (com[6]=='A')
 566   4                        {
 567   5                          for (j=8; j<10;j++)
 568   5                          {
 569   6                            tab[j-8]=com[j];
 570   6                          }
 571   5                          angle=conversioncoord(tab);
 572   5                          if (angle%5==0){
 573   6                            if(angle>=5 && angle<=45){
 574   7                              commande.DCT_Obst_Resolution=angle;
 575   7                              commande_correct=1;
 576   7                            }
 577   6                          }
 578   5                          else
 579   5                          {
 580   6                            commande_correct=0;
 581   6                          }
 582   5                        }
 583   4      
 584   4                        else
 585   4                        {
 586   5                          commande.DCT_Obst_Resolution=30;
 587   5                        }
 588   4                        break;
 589   4                      default:
 590   4                        commande.Etat_DCT_Obst=oui_360;
 591   4                        commande.DCT_Obst_Resolution=30;
 592   4                        break;
 593   4                    }
 594   3                    break;
 595   3                  case 'S': // cas MOS
 596   3                    commande.A_Obst=Obst_proche_balayage;
 597   3                    switch(com[4])
 598   3                    {
 599   4                      case 'A':
 600   4                        commande.Etat_DCT_Obst=oui_360; // d�fault de D
 601   4                        for (j=6; j<8;j++)
 602   4                        {
 603   5                          tab[j-6]=com[j];
 604   5                        }
 605   4                        angle=conversioncoord(tab);
 606   4                        if (angle%5==0){
 607   5                          if(angle>=5 && angle<=45){
 608   6                            commande.DCT_Obst_Resolution=angle;
 609   6                            commande_correct=1;
 610   6                          }
 611   5                        }
 612   4                        else
C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:46:44 PAGE 11  

 613   4                        {
 614   5                          commande_correct=0;
 615   5                        }
 616   4      
 617   4                        break;
 618   4                      case 'D':
 619   4                        commande.Etat_DCT_Obst=oui_180;
 620   4                        if (com[6]=='A')
 621   4                        {
 622   5                          for (j=8; j<10;j++)
 623   5                          {
 624   6                            tab[j-8]=com[j];
 625   6                          }
 626   5                          angle=conversioncoord(tab);
 627   5                          if (angle%5==0){
 628   6                            if(angle>=5 && angle<=45){
 629   7                              commande.DCT_Obst_Resolution=angle;
 630   7                              commande_correct=1;
 631   7                            }
 632   6                          }
 633   5                          else
 634   5                          {
 635   6                            commande_correct=0;
 636   6                          }
 637   5                        }
 638   4      
 639   4                        else
 640   4                        {
 641   5                          commande.DCT_Obst_Resolution=30;
 642   5                        }
 643   4                        break;
 644   4                      default:
 645   4                        commande.Etat_DCT_Obst=oui_360;
 646   4                        commande.DCT_Obst_Resolution=30;
 647   4                        break;
 648   4                    }
 649   3                    break;
 650   3                  default:break;
 651   3                }
 652   2                break;
 653   2              }
 654   1            return commande;
 655   1      }
 656          /*struct COMMANDES traitement_P(char *com, struct COMMANDES commande) // PAS ENCORE UTILISE (POS)
 657          {
 658            // a compl�ter
 659            return commande;
 660          }*/
 661          struct COMMANDES traitement_Q(struct COMMANDES commande) //ARRET DURGENCE
 662          {
 663   1        //serOutstring("arret d'urgence");
 664   1        commande.Etat_Epreuve=Stop_Urgence;
 665   1        return commande;
 666   1      }
 667          struct COMMANDES traitement_R(char * com, struct COMMANDES commande)// DIFFERENTES ROTATIONS OK
 668          {
 669   1        signed int angle;
 670   1        unsigned char tab[3];
 671   1        int j;
 672   1        switch (com[1])
 673   1            {
 674   2            case 'D': // si on recoit RD
C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:46:44 PAGE 12  

 675   2            {
 676   3              commande.Etat_Mouvement=Rot_90D;
 677   3              break;
 678   3            }
 679   2            case 'G': //Si on recoit RG
 680   2            {
 681   3              commande.Etat_Mouvement=Rot_90G;
 682   3              break;
 683   3            }
 684   2            case 'C':// si on recoit RC
 685   2            {
 686   3              if (com[3]== 'D')
 687   3              {
 688   4                commande.Etat_Mouvement=Rot_180D;
 689   4                break;
 690   4              }
 691   3              if (com[3]== 'G')
 692   3              {
 693   4                commande.Etat_Mouvement=Rot_180G;
 694   4                break;
 695   4              }
 696   3            }
 697   2            case 'A': // on recoit RA
 698   2            {
 699   3              switch (com[3])
 700   3              {
 701   4                case 'D':
 702   4                {
 703   5                  commande.Etat_Mouvement=Rot_AngD;
 704   5                  for (j=5; j<=7;j++)
 705   5                  {
 706   6                      tab[j-5]=com[j];
 707   6                  }
 708   5                  angle=conversionangle_positif(tab);
 709   5                  commande.Angle=angle;
 710   5                  break;
 711   5                }
 712   4                case 'G':
 713   4                {
 714   5                  commande.Etat_Mouvement=Rot_AngG;
 715   5                  for (j=5; j<=7;j++)
 716   5                  {
 717   6                      tab[j-5]=com[j];
 718   6                  }
 719   5                  angle=conversionangle_positif(tab);
 720   5                  commande.Angle=angle;
 721   5                  break;
 722   5                }
 723   4                default :
 724   4                {
 725   5                  commande.Etat_Mouvement=Rot_AngD;
 726   5                  angle=90;
 727   5                  commande.Angle=angle;
 728   5                  break;
 729   5                }
 730   4            }
 731   3            break;
 732   3          }
 733   2            default:
 734   2            {
 735   3              break;
 736   3            }
C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:46:44 PAGE 13  

 737   2          }
 738   1          return commande;
 739   1      }
 740          struct COMMANDES traitement_S(char * com, struct COMMANDES commande/*,char f_b, char t_son, char t_silence
             -, char bip_b*/) // STOPPER
 741          {
 742   1        int i;
 743   1        char f_b=6;
 744   1        char t_son=25;
 745   1        char t_silence=50;
 746   1        char bip_b=3;
 747   1        char tab[2];
 748   1        char frequence;
 749   1        char duree_son;
 750   1        char duree_silence;
 751   1        char nombre_Bips;
 752   1      
 753   1        if( com[1]=='D')
 754   1        {
 755   2          commande.son=emission;
 756   2            if(com[3]=='F')
 757   2            {
 758   3              for (i=5; i<7;i++)
 759   3              {
 760   4                tab[i-5]=com[i];
 761   4              }
 762   3              frequence=conversioncoord(tab);
 763   3              if (frequence >99 ||frequence <1)
 764   3              {
 765   4                  commande_correct = 0;
 766   4              }
 767   3              else
 768   3              {
 769   4                commande.frequence=frequence;
 770   4                commande_correct = 1;
 771   4              }
 772   3              for (i=10; i<12;i++)
 773   3              {
 774   4                tab[i-10]=com[i];
 775   4              }
 776   3              duree_son=conversioncoord(tab);
 777   3              if (duree_son >99 ||duree_son <1)
 778   3              {
 779   4                  commande_correct = 0;
 780   4              }
 781   3              else
 782   3              {
 783   4                commande.duree_son=duree_son;
 784   4                commande_correct = 1;
 785   4              }
 786   3              for (i=15; i<17;i++)
 787   3              {
 788   4                tab[i-15]=com[i];
 789   4              }
 790   3              duree_silence=conversioncoord(tab);
 791   3              if (duree_silence >99 ||duree_silence <1)
 792   3              {
 793   4                  commande_correct = 0;
 794   4              }
 795   3              else
 796   3              {
 797   4                commande.duree_silence=duree_silence;
C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:46:44 PAGE 14  

 798   4                commande_correct = 1;
 799   4              }
 800   3              for (i=20; i<22;i++)
 801   3              {
 802   4                tab[i-20]=com[i];
 803   4              }
 804   3              nombre_Bips=conversioncoord(tab);
 805   3              if (nombre_Bips >99 ||nombre_Bips <1)
 806   3              {
 807   4                  commande_correct = 0;
 808   4              }
 809   3              else
 810   3              {
 811   4                commande.nombre_Bips=nombre_Bips;
 812   4                commande_correct = 1;
 813   4              }
 814   3      
 815   3            }
 816   2            else
 817   2            {
 818   3              commande.frequence=f_b;               // d�finit par le code fr�quence allant de 1 a 99 (mais defini de 1
             - a 21)
 819   3              commande.duree_son=t_son;                 // dur�e du signal sonore
 820   3              commande.duree_silence=t_silence;             // duree du silence
 821   3              commande.nombre_Bips=bip_b;             // nombre de bips
 822   3            }
 823   2        }
 824   1        else
 825   1        {
 826   2          commande.Etat_Mouvement=Stopper;
 827   2        }
 828   1        return commande;
 829   1      }
 830          struct COMMANDES traitement_T(char * com, struct COMMANDES commande) // VITESSE A REGLER
 831          {
 832   1        char vitesse;
 833   1        char tab[3];
 834   1        int j;
 835   1        // on regarde le param�tre de la vitesse
 836   1      
 837   1        for (j=3; j<=5;j++)
 838   1        {
 839   2            tab[j-3]=com[j];
 840   2        }
 841   1        vitesse=conversionangle_positif(tab);
 842   1        j = ((int)vitesse& 0x00FF);
 843   1        if (j >= 100){
 844   2            commande_correct = 0;}
 845   1        else {
 846   2            vitesse_par_defaut=(vitesse & 0x00FF);
 847   2            strcpy(message_PC_com,"\r\n>");
 848   2            commande_correct = 2;
 849   2        }
 850   1        return commande;
 851   1      
 852   1      }
 853          
 854          struct COMMANDES Message (char * com/*, char f_b,char t_son,char t_silence,char bip_b*/){
 855   1      //  char tabcoordx[2];
 856   1      //  char tabcoordy[2];
 857   1      //  char tabangle[2];
 858   1      //  signed char coordx;
C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:46:44 PAGE 15  

 859   1      //  signed char coordy;
 860   1      //  char angle;
 861   1      //  int cpt=0;
 862   1        //a modifier
 863   1      
 864   1      
 865   1      
 866   1        struct COMMANDES commande;
 867   1        commande.Etat_Epreuve = Epreuve_non;
 868   1        commande.Vitesse = vitesse_par_defaut;
 869   1        commande.Etat_Mouvement = Mouvement_non;
 870   1        commande.Etat_ACQ_Son = ACQ_non;
 871   1        commande.A_Obst = Non_obst;
 872   1        commande.Etat_DCT_Obst = DCT_non;
 873   1        commande.Etat_Lumiere = Lumiere_non;
 874   1        commande.Etat_Servo = Servo_non;
 875   1        commande.Etat_Energie = Energie_non;
 876   1        commande.Etat_Photo = Photo_non;
 877   1        commande.Etat_Position = Position_non;
 878   1        commande.son=non_emission;
 879   1      
 880   1          switch (com[0])
 881   1          {
 882   2          case 'A':// si on recoit un A AVANCER OU DUREE DAQUISITION FIXEE
 883   2          {
 884   3            commande=traitement_A(com,commande);
 885   3            break;
 886   3          }
 887   2          case 'T':// si on recoit un TV Reglage de la vitesse seulement
 888   2          {
 889   3            commande=traitement_T(com,commande);
 890   3            break;
 891   3          }
 892   2          case 'D':// si on recoit un D (D�but de l'epreuve)
 893   2          {
 894   3            commande=traitement_D(com,commande);
 895   3            break;
 896   3          }
 897   2          case 'E':// si on recoit un E (fin de l'epreuve)
 898   2          {
 899   3            commande=traitement_E(commande);
 900   3            break;
 901   3      
 902   3          }
 903   2          case 'Q':// si on recoit un Q (arret d'urgence)
 904   2          {
 905   3            commande=traitement_Q(commande);
 906   3            break;
 907   3      
 908   3          }
 909   2          case 'L':// si on recoit un M (mesure et autre)
 910   2          {
 911   3            commande=traitement_L(com,commande);
 912   3            break;
 913   3          }
 914   2          case 'M':// si on recoit un M (mesure et autre)
 915   2          {
 916   3            commande=traitement_M(com,commande);
 917   3            break;
 918   3          }
 919   2          case 'I':// si on recoit un IPO (I)
 920   2          {
C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:46:44 PAGE 16  

 921   3            // a faire
 922   3            //commande=traitement_I(com,commande);
 923   3            break;
 924   3          }
 925   2          case 'P':// si on recoit un POS
 926   2          {
 927   3            //commande=traitement_P(com,commande);
 928   3            //envoie de information
 929   3            break;
 930   3      
 931   3          }
 932   2          case 'B': //si on recoit un B RECULER
 933   2          {
 934   3            commande=traitement_B(com,commande);
 935   3            break;
 936   3          }
 937   2          case 'S': // si on recoit S
 938   2          {
 939   3            commande=traitement_S(com, commande/*,f_b, t_son, t_silence, bip_b*/);
 940   3      
 941   3            break;
 942   3          }
 943   2          case 'G': // si on recoit G
 944   2          {
 945   3            commande=traitement_G(com,commande);
 946   3            break;
 947   3          }
 948   2      
 949   2          case 'R': //Si On recoit R ROTATION
 950   2          {
 951   3            commande=traitement_R(com,commande);
 952   3            break;
 953   3          }
 954   2          case 'C':
 955   2            commande=traitement_C(com,commande);
 956   2            break;
 957   2          default:
 958   2          {
 959   3          commande_correct = 0;
 960   3          }
 961   2      }
 962   1      //}
 963   1      return commande;
 964   1      }
 965          
 966          
 967          
 968          void main (void)
 969          {
 970   1      //D�claration des variables
 971   1        //struct COMMANDES_SERIALIZER commande_serializer;
 972   1        struct COMMANDES commande;
 973   1        char message_s[50] = {0};
 974   1        char mess[6] = {0};
 975   1        char echo[3] = {0};
 976   1        char com[50] = {0};
 977   1      //  char nbr[10];
 978   1        char a;
 979   1        char i =0;
 980   1        int b = 0;
 981   1        unsigned char code_err = 0;
 982   1      
C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:46:44 PAGE 17  

 983   1        //a modifier
 984   1        char f_b=6;
 985   1        char t_son=25;
 986   1        char t_silence=50;
 987   1        char bip_b=3;
 988   1      
 989   1        EA=0;
 990   1        Init_Device();  // Initialisation du microcontroleur
 991   1        Config_Timer2();
 992   1        Config_timer0();
 993   1        Config_Timer3();
 994   1        Config_SPI_MASTER();
 995   1        CFG_VREF();
 996   1        CFG_ADC0();
 997   1        CFG_Clock_UART();
 998   1        cfg_UART0_mode1();
 999   1        init_Serial_Buffer();
1000   1        init_Serial_Buffer1();
1001   1        CFG_UART1();
1002   1        NSS_slave = 1;
1003   1        TR2 = 0;
1004   1        energie = 0;
1005   1        EA=1;
1006   1      
1007   1        serOutstring("\n\rDemarrage robot\n\r>");
1008   1      // a commenter si le robot est d�ja allum� avant le lancement du code
1009   1      // Pour recevoir le message de d�marrage du serializer
1010   1      /*  do{
1011   1            a=serInchar1();
1012   1            echo[0] = a;
1013   1            echo[1] = '\0';
1014   1            serOutstring(echo);
1015   1            memset(echo,0,strlen(echo));
1016   1          }while(a!=0x3E);
1017   1      */
1018   1        while(1){
1019   2      
1020   2          memset(message_s,0,sizeof(message_s));
1021   2          memset(mess, 0, strlen(mess));
1022   2          memset(message_PC_com, 0, strlen(message_PC_com));
1023   2      
1024   2          commande_correct =1;
1025   2      
1026   2          i=0;
1027   2          a=0;
1028   2          memset(com, 0, 50);
1029   2          do{
1030   3            a=serInchar();
1031   3            echo[0] = a;
1032   3            echo[1] = '\0';
1033   3            serOutstring(echo);
1034   3            memset(echo,0,strlen(echo));
1035   3            if (a!=0x00)
1036   3              {
1037   4              com[i]=a;
1038   4              i=i+1;
1039   4              }
1040   3            }while(a!=0x0D); //Commenté pour les tests avec le simulateur
1041   2      
1042   2          commande = Message(com);
1043   2            
1044   2          if (commande_correct == 1){
C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:46:44 PAGE 18  

1045   3              fonctionRoutage(commande);
1046   3          }
1047   2          if (commande_correct == 2){
1048   3            serOutstring(message_PC_com); // si erreur
1049   3          }
1050   2          if(commande_correct == 0){
1051   3            strcpy(mess, "\n\r#\n\r>");
1052   3            serOutstring(mess); // si erreur
1053   3          }
1054   2        }
1055   1      
1056   1      }
1057          
1058          void ISR_Timer2 (void) interrupt 5 {
1059   1        TF2 = 0; //Remise � '0' du flag d'overflow
1060   1        PWM_servo=!PWM_servo; //On envoie le signal PWM au servomoteur
1061   1      }
1062          
1063          void ISR_Timer3 (void) interrupt 14 {
1064   1        TMR3CN &= 0x04; //Remise � '0' du flag d'overflow
1065   1        courant = Courant_ADC();
1066   1        energie += 9.6*courant*0.001*0.035;
1067   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5903    ----
   CONSTANT SIZE    =    375    ----
   XDATA SIZE       =     61     764
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
