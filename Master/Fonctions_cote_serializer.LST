C51 COMPILER V9.51   FONCTIONS_COTE_SERIALIZER                                             05/24/2018 14:45:06 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE FONCTIONS_COTE_SERIALIZER
OBJECT MODULE PLACED IN Fonctions_cote_serializer.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe Src\Fonctions_cote_serializer.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\Fon
                    -ctions_cote_serializer.lst) TABS(2) OBJECT(Fonctions_cote_serializer.obj)

line level    source

   1          #include <c8051f020.h>
   2          
   3          #include "Fonctions_cote_serializer.h"
   4          
   5          //#include "FO_M2_Structures_COMMANDES_INFORMATIONS_Serializer.h"
   6          
   7          /** 
   8          convertion ordre reçu par le centrale de controle en ordre pour 
   9          le robot
  10          Fonction decodage action
  11          
  12          Fonction mouvement elementaire :
  13          avancer (distance)
  14          avancer (temps, vitesse)
  15          
  16          reculer (distance)
  17          reculer (temps, vitesse)
  18          
  19          tourner (degrée)
  20          **/
  21          
  22          /**
  23          All commands and parameters are separated by spaces. 
  24          There are two types of parameters: Simple and Complex. 
  25          Simple parameters are basically simple strings, 
  26          such as “hello” or “1”. 
  27          Complex parameters are simple strings separated by colons “:”, 
  28          such as “hello:world” or “2:1”.message fini par /r
  29          
  30          All commands (and associated parameters) are terminated by an ASCII 
  31          carriage-return character “\r” (0x0D).
  32          
  33          reponse du serializer : 
  34          Ret/r/n< -> réussite + ret = réponse de retour
  35          ACK/r/n< -> réussite sans réponse de retour
  36          NACK/r/n< -> échec
  37          
  38          **/
  39          
  40          int conv_distance_ticks(int d){ // convertion d[cm] en ticks  
  41   1        int ret = ceil(d*(624/(6*3.1415))); //624ticks = 1tour et diamêtre roue = 60mm
  42   1        return ret;
  43   1      }
  44          
  45          int conv_angle_ticks(int angle){ 
  46   1        int ret;
  47   1        float a = angle/360.0;
  48   1        ret = ceil(4600*a); //2346ticks = un 360° du robot
  49   1        return ret;
  50   1      }
  51          
  52          void itos(int i, char * ret){
  53   1        char nbr3[3];
  54   1        char nbr2[2];
C51 COMPILER V9.51   FONCTIONS_COTE_SERIALIZER                                             05/24/2018 14:45:06 PAGE 2   

  55   1        char nbr1[1];
  56   1        int c = i/100;
  57   1        int d = (i-c*100)/10;
  58   1        int u = i-c*100-d*10;
  59   1        
  60   1        if (i > 99) {
  61   2          nbr3[0] = c+'0';
  62   2          nbr3[1] = d+'0';
  63   2          nbr3[2] = u+'0';
  64   2          strcpy(ret,nbr3);
  65   2        }
  66   1        else if (i > 9) {
  67   2          nbr2[0] = d+'0';
  68   2          nbr2[1] = u+'0';
  69   2          strcpy(ret,nbr2);
  70   2        }
  71   1        else {
  72   2          nbr1[0] = u+'0';
  73   2          strcpy(ret,nbr1);
  74   2        }
  75   1      }
  76          
  77          int true_vit(unsigned char vit){
  78   1        int ret = vit;
  79   1        
  80   1        if ( vit >= 100){
  81   2          ret = -(vit - 100);
  82   2        }
  83   1        return ret;
  84   1      }
  85          
  86          void true_ticks(int ticks, char * ret){
  87   1        char str[4] = {0};
  88   1        int l = 0;
  89   1      
  90   1        if ( ticks >= 0){ //  différentitation angle positife et négatif
  91   2          sprintf(ret, "%d", ticks);
  92   2        }
  93   1        else{
  94   2          ticks = -1*ticks;
  95   2          strcpy(ret,"-");
  96   2          sprintf(str, "%d", ticks);
  97   2          strcat(ret,str);
  98   2          l = strlen(str)+2;
  99   2          ret[l]='\0'; // on force la fin de chaine
 100   2        }
 101   1      }
 102          /* entrée : une structure représenatnt une commande destiné au serializer
 103            sortie : une chaine de caractère qui est la commande à envoyer au serializer
 104          
 105          fonctionnement : à l'aide de l'enum Etat_commande qui représente l'action à éffectué par le serializer
 106           on effectue un switch qui construit une chaine de caractère avec les paramêtre necessaire
 107          */
 108          
 109          
 110          void formate_serializer(struct COMMANDES_SERIALIZER com, char * ret){
 111   1        char nbr[9];
 112   1        
 113   1        switch (com.Etat_Commande){
 114   2          case Reset :{
 115   3            strcpy(ret,"reset");
 116   3            break;
C51 COMPILER V9.51   FONCTIONS_COTE_SERIALIZER                                             05/24/2018 14:45:06 PAGE 3   

 117   3          }
 118   2          case Getenc_1 :{
 119   3            break;
 120   3          }
 121   2          case Getenc_2 :{
 122   3            break;
 123   3          }
 124   2          case Getenc_1_2 :{
 125   3            break;
 126   3          }
 127   2          case Clrenc_1 :{
 128   3              break;
 129   3          }
 130   2          case Clrenc_2 :{
 131   3            break;
 132   3          }
 133   2          case Clrenc_1_2 :{
 134   3            break;
 135   3          }
 136   2          case mogo_1 :{
 137   3            strcpy(ret,"mogo 1:");
 138   3            sprintf(nbr, "%d", true_vit(com.Vitesse_Mot1));
 139   3            strcat(ret,nbr);
 140   3            break;
 141   3          }
 142   2          case mogo_2 :{
 143   3            strcpy(ret,"mogo 2:");
 144   3            sprintf(nbr, "%d", true_vit(com.Vitesse_Mot2));
 145   3            strcat(ret,nbr);
 146   3            break;
 147   3          }
 148   2          case mogo_1_2 :{
 149   3            strcpy(ret,"mogo 1:");
 150   3            sprintf(nbr, "%d", true_vit(com.Vitesse_Mot1));
 151   3            strcat(ret,nbr);
 152   3            strcat(ret," 2:");
 153   3            sprintf(nbr, "%d", true_vit(com.Vitesse_Mot2));
 154   3            strcat(ret,nbr);
 155   3            break;
 156   3          }
 157   2          case Vpid_set :{
 158   3            strcpy(ret,"vpid ");
 159   3            sprintf(nbr, "%d", com.Set_P);
 160   3            strcat(ret,nbr);
 161   3            strcat(ret,":");
 162   3            sprintf(nbr, "%d", com.Set_I);
 163   3            strcat(ret,nbr);
 164   3            strcat(ret,":");
 165   3            sprintf(nbr, "%d", com.Set_D);
 166   3            strcat(ret,nbr);
 167   3            strcat(ret,":");
 168   3            sprintf(nbr, "%d", com.Set_L_A);
 169   3            strcat(ret,nbr);
 170   3            strcat(ret,":");
 171   3            break;
 172   3          }
 173   2          case Vpid_read :{
 174   3            strcpy(ret,"vpid");
 175   3            break;
 176   3          }
 177   2          case digo_1 :{
 178   3            strcpy(ret,"digo 1:");
C51 COMPILER V9.51   FONCTIONS_COTE_SERIALIZER                                             05/24/2018 14:45:06 PAGE 4   

 179   3            true_ticks(com.Ticks_mot1, nbr);
 180   3            strcat(ret,nbr);
 181   3            strcat(ret,":");
 182   3            sprintf(nbr, "%d", true_vit(com.Vitesse_Mot1));
 183   3            strcat(ret,nbr);
 184   3            break;
 185   3          }
 186   2          case digo_2 :{
 187   3            strcpy(ret,"digo 2:");
 188   3            sprintf(nbr, "%d", true_vit(com.Vitesse_Mot2));
 189   3            strcat(ret,nbr);
 190   3            strcat(ret,":");
 191   3            true_ticks(com.Ticks_mot2, nbr);
 192   3            strcat(ret,nbr);
 193   3            break;
 194   3          }
 195   2          case digo_1_2 :{
 196   3            strcpy(ret,"digo 1:");
 197   3            true_ticks(com.Ticks_mot1, nbr);
 198   3            strcat(ret,nbr);
 199   3            strcat(ret,":");
 200   3            sprintf(nbr, "%d", true_vit(com.Vitesse_Mot1));
 201   3            strcat(ret,nbr);
 202   3            strcat(ret," 2:");
 203   3            true_ticks(com.Ticks_mot2, nbr);
 204   3            strcat(ret,nbr);
 205   3            strcat(ret,":");
 206   3            sprintf(nbr, "%d", true_vit(com.Vitesse_Mot2));
 207   3            strcat(ret,nbr);
 208   3            break;
 209   3          }
 210   2          case Dpid_set :{
 211   3            strcpy(ret,"dpid ");
 212   3            sprintf(nbr, "%d",com.Set_P);
 213   3            strcat(ret,nbr);
 214   3            strcat(ret,":");
 215   3            sprintf(nbr, "%d", com.Set_I);
 216   3            strcat(ret,nbr);
 217   3            strcat(ret,":");
 218   3            sprintf(nbr, "%d", com.Set_D);
 219   3            strcat(ret,nbr);
 220   3            strcat(ret,":");
 221   3            sprintf(nbr, "%d", com.Set_L_A);
 222   3            strcat(ret,nbr);
 223   3            strcat(ret,":");
 224   3            break;
 225   3          }
 226   2          case Dpid_read :{
 227   3            strcpy(ret,"vpid");
 228   3            break;
 229   3          }
 230   2          case Rpid_Stinger :{
 231   3            break;
 232   3          }
 233   2          case Pids :{
 234   3            break;
 235   3          }
 236   2          case Stop :{
 237   3            strcpy(ret,"stop");
 238   3            break;
 239   3          }
 240   2          case Vel :{
C51 COMPILER V9.51   FONCTIONS_COTE_SERIALIZER                                             05/24/2018 14:45:06 PAGE 5   

 241   3            strcpy(ret,"vel");
 242   3            break;
 243   3          }
 244   2          case Restore :{
 245   3            strcpy(ret,"restore");
 246   3            break;
 247   3          }
 248   2          default:
 249   2            break;
 250   2        }
 251   1        strcat(ret,"\r");
 252   1      }
 253          /* entré : une structure représentant une commande envoyé par le PC de commande
 254            sortie : une structure représentant une commande destiné 
 255          
 256          fonctionnement : à l'aide de l'enum Etat_Epreuve et Etat_Mouvement
 257          on remplit une strucutre COMMANDES_SERIALIZER avec les paramètre destiné au serializer
 258          */
 259          struct COMMANDES_SERIALIZER transcode_commande_to_serializer (struct COMMANDES com) {
 260   1        struct  COMMANDES_SERIALIZER ret;
 261   1        char v_angl = 20;
 262   1        char v_line = 30;
 263   1      
 264   1        switch (com.Etat_Epreuve){//"D" "E" "Q"
 265   2          case Stop_Urgence:{
 266   3            ret.Etat_Commande = Stop;
 267   3            break;
 268   3          }
 269   2          default:
 270   2            break;
 271   2        }
 272   1          
 273   1        switch (com.Etat_Mouvement){
 274   2          // avancer  
 275   2          case Avancer:{ 
 276   3            ret.Etat_Commande = mogo_1_2;
 277   3            if (com.Vitesse == '0'){
 278   4              com.Vitesse = v_line;
 279   4            }
 280   3            ret.Vitesse_Mot1 = com.Vitesse;
 281   3            ret.Vitesse_Mot2 = com.Vitesse;
 282   3            break;
 283   3          }
 284   2          // reculer
 285   2          case(Reculer):{ 
 286   3              ret.Etat_Commande = mogo_1_2;
 287   3              if (com.Vitesse == '0'){
 288   4                com.Vitesse = v_line;
 289   4              }
 290   3              ret.Vitesse_Mot1 = com.Vitesse + 100;
 291   3              ret.Vitesse_Mot2 = com.Vitesse + 100;
 292   3              break;
 293   3          }
 294   2          // stop   
 295   2          case(Stopper):{ 
 296   3              ret.Etat_Commande = Stop;
 297   3              break;
 298   3          }
 299   2          // rotation 90° droite 
 300   2          case(Rot_90D):{ // motor1 = droite motor2 = gauche
 301   3              if (com.Vitesse == '0'){
 302   4                com.Vitesse = v_angl;
C51 COMPILER V9.51   FONCTIONS_COTE_SERIALIZER                                             05/24/2018 14:45:06 PAGE 6   

 303   4              }
 304   3              ret.Etat_Commande = digo_1_2;
 305   3              ret.Vitesse_Mot1 = com.Vitesse;
 306   3              ret.Ticks_mot1 = -conv_angle_ticks(45);
 307   3              ret.Vitesse_Mot2 = (com.Vitesse);
 308   3              ret.Ticks_mot2 = conv_angle_ticks(45);
 309   3              break;
 310   3          }
 311   2          // rotation 90° gauche
 312   2          case(Rot_90G):{ 
 313   3              if (com.Vitesse == '0'){
 314   4                com.Vitesse = v_angl;
 315   4              }
 316   3              ret.Etat_Commande = digo_1_2;
 317   3              ret.Vitesse_Mot1 = (com.Vitesse);
 318   3              ret.Ticks_mot1 = conv_angle_ticks(45);
 319   3              ret.Vitesse_Mot2 = com.Vitesse;
 320   3              ret.Ticks_mot2 = -conv_angle_ticks(45);
 321   3              break;
 322   3          }
 323   2          // rotation 180° droite
 324   2          case(Rot_180D):{ 
 325   3              if (com.Vitesse == '0'){
 326   4                com.Vitesse = v_angl;
 327   4              }
 328   3              ret.Etat_Commande = digo_1_2;
 329   3              ret.Vitesse_Mot1 = com.Vitesse;
 330   3              ret.Ticks_mot1 = -conv_angle_ticks(90);
 331   3              ret.Vitesse_Mot2 = (com.Vitesse);
 332   3              ret.Ticks_mot2 = conv_angle_ticks(90);
 333   3              break;
 334   3          }
 335   2          // rotation 180° gauche
 336   2          case(Rot_180G):{ 
 337   3              if (com.Vitesse == '0'){
 338   4                com.Vitesse = v_angl;
 339   4              }
 340   3              ret.Etat_Commande = digo_1_2;
 341   3              ret.Vitesse_Mot1 = (com.Vitesse);
 342   3              ret.Ticks_mot1 = conv_angle_ticks(90);
 343   3              ret.Vitesse_Mot2 = com.Vitesse;
 344   3              ret.Ticks_mot2 = -conv_angle_ticks(90);
 345   3              break;
 346   3          }
 347   2              
 348   2          // rotation d'un angle donné à droite
 349   2          case(Rot_AngD):{ 
 350   3              if (com.Vitesse == '0'){
 351   4                com.Vitesse = v_angl;
 352   4              }
 353   3              ret.Etat_Commande = digo_1_2;
 354   3              ret.Vitesse_Mot1 = com.Vitesse;
 355   3              ret.Ticks_mot1 = -conv_angle_ticks(com.Angle/2);
 356   3              ret.Vitesse_Mot2 = (com.Vitesse);
 357   3              ret.Ticks_mot2 = conv_angle_ticks(com.Angle/2);
 358   3              break;
 359   3          }
 360   2          // rotation d'un angle donné à droite   
 361   2          case(Rot_AngG):{ 
 362   3              if (com.Vitesse == '0'){
 363   4                com.Vitesse = v_angl;
 364   4              }
C51 COMPILER V9.51   FONCTIONS_COTE_SERIALIZER                                             05/24/2018 14:45:06 PAGE 7   

 365   3              ret.Etat_Commande = digo_1_2;
 366   3              ret.Vitesse_Mot1 = (com.Vitesse);
 367   3              ret.Ticks_mot1 = conv_angle_ticks(com.Angle/2);
 368   3              ret.Vitesse_Mot2 = com.Vitesse;
 369   3              ret.Ticks_mot2 = -conv_angle_ticks(com.Angle/2);
 370   3              break;
 371   3          }
 372   2              
 373   2          case(Depl_Coord):{
 374   3              if (com.Vitesse == '0'){
 375   4                com.Vitesse = v_angl;
 376   4              }
 377   3              ret.Etat_Commande = digo_1_2;
 378   3              ret.Vitesse_Mot1 = com.Vitesse;
 379   3              ret.Ticks_mot1 = conv_distance_ticks(com.Coord_X);
 380   3              ret.Vitesse_Mot2 = com.Vitesse;
 381   3              ret.Ticks_mot2 = conv_distance_ticks(com.Coord_X);
 382   3              
 383   3              break;
 384   3          }
 385   2          default:
 386   2              break;
 387   2        }
 388   1      
 389   1        return ret;
 390   1      }
 391            
 392            


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2631    ----
   CONSTANT SIZE    =     89    ----
   XDATA SIZE       =   ----     113
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
