C51 COMPILER V9.51   LIEN_STRUCTURE_COMMANDE                                               05/24/2018 14:01:17 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE LIEN_STRUCTURE_COMMANDE
OBJECT MODULE PLACED IN Lien_Structure_commande.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe Src\Lien_Structure_commande.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\Lien_
                    -Structure_commande.lst) TABS(2) OBJECT(Lien_Structure_commande.obj)

line level    source

   1          #include <c8051f020.h>
   2          #include <string.h>
   3          #include <stdio.h>
   4          #include <intrins.h>
   5          
   6          #include "FO_M1_Structures_COMMANDES_INFORMATIONS_CentraleDeCommande.h"
   7          #include "Config_ADC.h"
   8          #include "Servomoteur_horizontal.h"
   9          #include "ultrason.h"
  10          #include "Fonctions_cote_serializer.h"
  11          #include "Declarations_GPIO.h"
  12          #include "Config_Globale.h"
  13          #include "Timers.h"
  14          #include "Config_SPI.h"
  15          #include "Transmission_SPI.h"
  16          #include "UART0_RingBuffer_lib.h"
  17          #include "ConfigUART1.h"
  18          #include "Lien_Structure_commande.h"
  19          #include "Detect_Obst.h"
  20          #include "Generation_son.h"
  21          #include "Mesure_courant.h"
  22          #include "Encodage_Pointeur_lum.h"
  23          
  24          #ifndef CFG_Globale
  25            #define CFG_Globale
  26            #include "CFG_Globale.h"
  27          #endif
  28          
  29          //------------------------------------------------------------------------------------
  30          // D�clarations des variables globales
  31          //------------------------------------------------------------------------------------
  32          
  33          char a;
  34          char i =0;
  35          char message_s[50] = {0};
  36          char mess[50] = {0};
  37          void tempo_emiss(void);
  38          struct COMMANDES_SERIALIZER commande_serializer;
  39          float courant_actuel;
  40          float dist_avant;
  41          float dist_arriere;
  42          char Angle_voulu,msg_Slave,angle;
  43          signed int Angle_atteint = 0;
  44          extern unsigned int courant;
  45          extern double energie;
  46          
  47          void routage(struct COMMANDES commande, enum Routage * type){
  48   1      
  49   1        if (commande.Etat_Servo==Servo_H){
  50   2          *type=Servo_Hor;
  51   2        }
  52   1        else  if (commande.Etat_Servo==Servo_V){
  53   2          *type=Servo_Vert;
  54   2        }
C51 COMPILER V9.51   LIEN_STRUCTURE_COMMANDE                                               05/24/2018 14:01:17 PAGE 2   

  55   1        else if (commande.Etat_Mouvement!=Mouvement_non){
  56   2          *type=Deplacement;
  57   2        }
  58   1        else if (commande.A_Obst!=DCT_non){
  59   2          *type=Obstacle;
  60   2        }
  61   1        else if (commande.Etat_Energie==Mesure_I){
  62   2          *type=Courant;
  63   2        }
  64   1        else if (commande.Etat_Energie==Mesure_E){
  65   2          *type=Energie;
  66   2        }
  67   1        else if (commande.frequence!=0){
  68   2          *type=Gene_Son;
  69   2        }
  70   1        else if (commande.Etat_Lumiere == Allumer){
  71   2          *type=Pointeur_Lum;
  72   2        }
  73   1      }
  74          // verifier attention effectuer les d�claration avant toute execution de code.
  75          void fonctionRoutage(struct COMMANDES commande){
  76   1        enum Routage route = Initialisation;
  77   1        unsigned char commande_SPI = 0x00;
  78   1        unsigned char trame[2] = 0;
  79   1        unsigned char taille_trame = 1;
  80   1        double alpha;
  81   1        int distance;
  82   1        char angle_ascii[3];
  83   1        char mess[50] = {0};
  84   1        char mess1[50] = {0}; // utilis� dans le cas du d�placement �l�mentaire
  85   1        char mess2[50] = {0}; // idem
  86   1        char mess3[50] = {0}; // idem
  87   1        int compteur = 0;
  88   1        char msg_Slave_ascii[256];
  89   1        struct INFORMATIONS info;
  90   1        char courant_ascii[4];
  91   1        char energie_ascii[4];
  92   1        extern char affichage [50];
  93   1        char string_s[1000] = {2};
  94   1        int cpt = 0;
  95   1        routage(commande,&route);
  96   1      
  97   1        switch (route){
  98   2      
  99   2      // OK
 100   2          case Servo_H:
 101   2            Angle_voulu=commande.Servo_Angle;
 102   2            Angle_atteint = CDE_Servo_H(Angle_voulu);
 103   2            serOutstring("\n\r AS H");
 104   2      
 105   2            memset(mess,0,strlen(mess));
 106   2            strcpy(mess,angle_ascii);
 107   2            strcat(mess,"\n\r>");
 108   2            serOutstring(mess);
 109   2            break;
 110   2      
 111   2      // OK
 112   2          case Servo_V:
 113   2            commande_SPI = 0xD3;
 114   2            trame[0]=commande.Servo_Angle;
 115   2            if (commande.Servo_Angle < 0){
 116   3              trame[1] = 0xAA; //Pour prévenir le Slave que l'angle qu'il va recevoir est négatif
C51 COMPILER V9.51   LIEN_STRUCTURE_COMMANDE                                               05/24/2018 14:01:17 PAGE 3   

 117   3              trame[0] =~ trame[0]; //On prend le complément pour ne pas envoyé un début ou une fin de trame dans
             - la SPI
 118   3            }
 119   2            else{
 120   3              trame[1] = 0xBB;
 121   3            }
 122   2            taille_trame = 2;
 123   2            echange_trame(trame,taille_trame,commande_SPI);
 124   2            tempo_emiss();
 125   2            msg_Slave = trame_recue();
 126   2            tempo_emiss();
 127   2            sprintf(msg_Slave_ascii,"%f",msg_Slave);
 128   2            serOutstring("\n\r AS V");
 129   2            serOutstring("\n\r>");
 130   2            break;
 131   2            
 132   2      // A FINIR DE DEBEUGER
 133   2          case Deplacement:
 134   2            if (commande.Etat_Mouvement == Depl_Coord) {
 135   3              alpha = atan(commande.Coord_Y / commande.Coord_X) * 180/3.1415; // r�sultat de atan en radian
 136   3              distance = ceil(pow(pow(commande.Coord_Y,2)+pow(commande.Coord_X,2),0.5)); // Pythagore
 137   3              if (alpha < 0){
 138   4                alpha+= 360; }
 139   3              // !!! L'ordre de cr�ation des messages est important (�crasement de variable)
 140   3              // instruction pour faire avancer le robot de la distance "distance"
 141   3              commande.Etat_Mouvement = Depl_Coord;
 142   3              commande.Coord_X = distance;
 143   3              commande_serializer = transcode_commande_to_serializer(commande);
 144   3              formate_serializer(commande_serializer, mess2);
 145   3              // Instruction  pour positionner le robot � l'angle finale
 146   3              commande.Etat_Mouvement = Rot_AngD;
 147   3              commande.Vitesse = 5;
 148   3              commande_serializer = transcode_commande_to_serializer(commande);
 149   3              formate_serializer(commande_serializer, mess3);
 150   3              // instruction pour positionner le robot dans l'angle de d�part
 151   3              commande.Etat_Mouvement = Rot_AngD;
 152   3              commande.Vitesse = 5;
 153   3              commande.Angle = alpha;
 154   3              commande_serializer = transcode_commande_to_serializer(commande);
 155   3              formate_serializer(commande_serializer, mess1);
 156   3              serOutstring1(mess1);
 157   3              serOutstring("\r\n");
 158   3              serOutstring(mess1);
 159   3              compteur = 0;
 160   3              memset(string_s,2,strlen(string_s));
 161   3              for(cpt = 0; cpt<10000; cpt++) //temporisation
 162   3              {
 163   4                _nop_();
 164   4              }
 165   3              do{
 166   4                serOutstring1("pids\r");// Attente que le serializer est fini (il renvoie 1 quand occup� et 0 sinon
 167   4                serOutstring("pids\r\n");// Attente que le serializer est fini (il renvoie 1 quand occup� et 0 sino
             -n
 168   4                for(cpt = 0; cpt<10000; cpt++) //temporisation
 169   4                {
 170   5                  _nop_();
 171   5                } 
 172   4                  do{ // recup reponse pids
 173   5                      a=serInchar1();
 174   5                      if (a!=0x00){
 175   6                        string_s[compteur]=a;
 176   6                        compteur=compteur+1;
C51 COMPILER V9.51   LIEN_STRUCTURE_COMMANDE                                               05/24/2018 14:01:17 PAGE 4   

 177   6                        }
 178   5                    }while( (a!='>') && !(string_s[compteur-5]== '0' || string_s[compteur-5]== '1') );
 179   4                    compteur = 0;
 180   4                  }while ( string_s[compteur-5] == '0');
 181   3                  compteur = 0;
 182   3              serOutstring("\r\n");
 183   3              serOutstring1(mess2);
 184   3              serOutstring(mess2);
 185   3              for(cpt = 0; cpt<10000; cpt++) //temporisation
 186   3              {
 187   4                _nop_();
 188   4              }
 189   3              compteur=0;
 190   3              do{
 191   4                
 192   4                serOutstring1("pids\r");// Attente que le serializer est fini (il renvoie 1 quand occup� et 0 sinon
 193   4                for(cpt = 0; cpt<10000; cpt++) //temporisation
 194   4                {
 195   5                  _nop_();
 196   5                } 
 197   4                do{ // recup message ACK
 198   5                    a=serInchar1();
 199   5                    if (a!=0x00){
 200   6                      string_s[compteur]=a;
 201   6                      compteur=compteur+1;
 202   6                    }
 203   5                }while(a!='>');
 204   4                    do{ // recup reponse pids
 205   5                      a=serInchar1();
 206   5                      if (a!=0x00){
 207   6                        string_s[compteur]=a;
 208   6                        compteur=compteur+1;
 209   6                      }
 210   5                    }while(a!='>');
 211   4                    
 212   4              }while ( string_s[compteur-4] == '0');
 213   3              compteur = 0;
 214   3              serOutstring("\r\n");
 215   3              serOutstring1(mess3);
 216   3              serOutstring(mess3);
 217   3            }
 218   2            else{
 219   3              commande_serializer = transcode_commande_to_serializer(commande);
 220   3              formate_serializer(commande_serializer, message_s);
 221   3              serOutstring1(message_s);
 222   3              serOutstring(message_s);
 223   3              i=0;
 224   3              a=0;
 225   3              do{
 226   4                a=serInchar1();
 227   4                if (a!=0x00){
 228   5                  mess[i]=a;
 229   5                  i=i+1;
 230   5                }
 231   4              }while(a!=0x3E);
 232   3            }
 233   2            mess[i] = '\0';
 234   2            serOutstring(mess);
 235   2            break;
 236   2      
 237   2      
 238   2      // A FINIR DE DEBEUGER (PB d'affichage!)
C51 COMPILER V9.51   LIEN_STRUCTURE_COMMANDE                                               05/24/2018 14:01:17 PAGE 5   

 239   2          case Obstacle:
 240   2            Detect_Obst(commande);
 241   2            break;
 242   2      
 243   2      // OK
 244   2          case Courant:
 245   2            info.Mesure_Courant = courant;
 246   2            sprintf(courant_ascii,"%d", info.Mesure_Courant);
 247   2            serOutstring(courant_ascii);
 248   2            serOutstring("mA\n\r>");
 249   2            break;
 250   2          
 251   2      // OK
 252   2          case Energie :
 253   2            info.Mesure_Energie = energie;
 254   2            sprintf(energie_ascii,"%d", info.Mesure_Energie);
 255   2            serOutstring(energie_ascii);
 256   2            serOutstring("J\n\r>");
 257   2            break;
 258   2          
 259   2      // OK
 260   2          case Gene_Son:
 261   2            son_sonore(commande);
 262   2            serOutstring("\n\r>");
 263   2            break;
 264   2          
 265   2      // OK
 266   2          case Pointeur_Lum:
 267   2            pointeur_lum(commande);
 268   2            serOutstring("\n\r>");
 269   2            break;
 270   2      
 271   2          default:
 272   2            strcpy(mess,"\n\r#\n\r>");
 273   2            serOutstring(mess);
 274   2            break;
 275   2      
 276   2        }
 277   1      }
 278          
 279          void tempo_emiss(void){
 280   1        unsigned int x = 0;
 281   1      
 282   1        for(x=0;x<65000;x++);
 283   1        for(x=0;x<65000;x++);
 284   1        for(x=0;x<65000;x++);
 285   1        for(x=0;x<65000;x++);
 286   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2290    ----
   CONSTANT SIZE    =   1262    ----
   XDATA SIZE       =    134    1589
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
