C51 COMPILER V9.51   LIEN_STRUCTURE_COMMANDE                                               05/25/2018 07:46:44 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE LIEN_STRUCTURE_COMMANDE
OBJECT MODULE PLACED IN Lien_Structure_commande.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe Lien_Structure_commande.c LARGE BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <c8051f020.h>
   2          #include <string.h>
   3          #include <stdio.h>
   4          #include <intrins.h>
   5          
   6          #include "FO_M1_Structures_COMMANDES_INFORMATIONS_CentraleDeCommande.h"
   7          #include "Config_ADC.h"
   8          #include "Servomoteur_horizontal.h"
   9          #include "ultrason.h"
  10          #include "Fonctions_cote_serializer.h"
  11          #include "Declarations_GPIO.h"
  12          #include "Config_Globale.h"
  13          #include "Timers.h"
  14          #include "Config_SPI.h"
  15          #include "Transmission_SPI.h"
  16          #include "UART0_RingBuffer_lib.h"
  17          #include "ConfigUART1.h"
  18          #include "Lien_Structure_commande.h"
  19          #include "Detect_Obst.h"
  20          #include "Generation_son.h"
  21          #include "Mesure_courant.h"
  22          #include "Encodage_Pointeur_lum.h"
  23          
  24          #ifndef CFG_Globale
  25            #define CFG_Globale
  26            #include "CFG_Globale.h"
  27          #endif
  28          
  29          //------------------------------------------------------------------------------------
  30          // D�clarations des variables globales
  31          //------------------------------------------------------------------------------------
  32          
  33          char a;
  34          char i =0;
  35          char message_s[50] = {0};
  36          char mess[50] = {0};
  37          void tempo_emiss(void);
  38          struct COMMANDES_SERIALIZER commande_serializer;
  39          float courant_actuel;
  40          float dist_avant;
  41          float dist_arriere;
  42          char Angle_voulu,msg_Slave,angle;
  43          signed int Angle_atteint = 0;
  44          extern unsigned int courant;
  45          extern double energie;
  46          
  47          void routage(struct COMMANDES commande, enum Routage * type){
  48   1      
  49   1        if (commande.Etat_Servo==Servo_H){
  50   2          *type=Servo_Hor;
  51   2        }
  52   1        else  if (commande.Etat_Servo==Servo_V){
  53   2          *type=Servo_Vert;
  54   2        }
  55   1        else if (commande.Etat_Mouvement!=Mouvement_non){
C51 COMPILER V9.51   LIEN_STRUCTURE_COMMANDE                                               05/25/2018 07:46:44 PAGE 2   

  56   2          *type=Deplacement;
  57   2        }
  58   1        else if (commande.A_Obst!=DCT_non){
  59   2          *type=Obstacle;
  60   2        }
  61   1        else if (commande.Etat_Energie==Mesure_I){
  62   2          *type=Courant;
  63   2        }
  64   1        else if (commande.Etat_Energie==Mesure_E){
  65   2          *type=Energie;
  66   2        }
  67   1        else if (commande.frequence!=0){
  68   2          *type=Gene_Son;
  69   2        }
  70   1        else if (commande.Etat_Lumiere == Allumer){
  71   2          *type=Pointeur_Lum;
  72   2        }
  73   1      }
  74          // verifier attention effectuer les d�claration avant toute execution de code.
  75          void fonctionRoutage(struct COMMANDES commande){
  76   1        enum Routage route = Initialisation;
  77   1        unsigned char commande_SPI = 0x00;
  78   1        unsigned char trame[2] = 0;
  79   1        unsigned char taille_trame = 1;
  80   1        int distance;
  81   1        char angle_ascii[3];
  82   1        char mess[50] = {0};
  83   1        char mess1[50] = {0}; // utilis� dans le cas du d�placement �l�mentaire
  84   1        char mess2[50] = {0}; // idem
  85   1        char mess3[50] = {0}; // idem
  86   1        int compteur = 0;
  87   1        char msg_Slave_ascii[256];
  88   1        struct INFORMATIONS info;
  89   1        char courant_ascii[5];
  90   1        char energie_ascii[5];
  91   1        extern char affichage [50];
  92   1        char string_s[1000] = {2};
  93   1        int cpt = 0;
  94   1        routage(commande,&route);
  95   1      
  96   1        switch (route){
  97   2      
  98   2      // OK
  99   2          case Servo_H:
 100   2            Angle_voulu=commande.Servo_Angle;
 101   2            Angle_atteint = CDE_Servo_H(Angle_voulu);
 102   2            serOutstring("\n\r AS H");
 103   2      
 104   2            memset(mess,0,strlen(mess));
 105   2            strcpy(mess,angle_ascii);
 106   2            strcat(mess,"\n\r>");
 107   2            serOutstring(mess);
 108   2            break;
 109   2      
 110   2      // OK
 111   2          case Servo_V:
 112   2            commande_SPI = 0xD3;
 113   2            trame[0]=commande.Servo_Angle;
 114   2            if (commande.Servo_Angle < 0){
 115   3              trame[1] = 0xAA; //Pour prévenir le Slave que l'angle qu'il va recevoir est négatif
 116   3              trame[0] =~ trame[0]; //On prend le complément pour ne pas envoyé un début ou une fin de trame dans
             - la SPI
C51 COMPILER V9.51   LIEN_STRUCTURE_COMMANDE                                               05/25/2018 07:46:44 PAGE 3   

 117   3            }
 118   2            else{
 119   3              trame[1] = 0xBB;
 120   3            }
 121   2            taille_trame = 2;
 122   2            echange_trame(trame,taille_trame,commande_SPI);
 123   2            tempo_emiss();
 124   2            msg_Slave = trame_recue();
 125   2            tempo_emiss();
 126   2            sprintf(msg_Slave_ascii,"%f",msg_Slave);
 127   2            serOutstring("\n\r AS V");
 128   2            serOutstring("\n\r>");
 129   2            break;
 130   2            
 131   2      // OK
 132   2          case Deplacement:
 133   2            if (commande.Etat_Mouvement == Depl_Coord) {
 134   3              distance = ceil(pow(pow(commande.Coord_Y,2)+pow(commande.Coord_X,2),0.5)); // Pythagore
 135   3      
 136   3              // instruction pour faire avancer le robot de la distance "distance"
 137   3              commande.Coord_X = distance;
 138   3              commande_serializer = transcode_commande_to_serializer(commande);
 139   3              formate_serializer(commande_serializer, message_s);
 140   3              serOutstring1(message_s);
 141   3              serOutstring(message_s);
 142   3              i=0;
 143   3              a=0;
 144   3              do{
 145   4                a=serInchar1();
 146   4                if (a!=0x00){
 147   5                  mess[i]=a;
 148   5                  i=i+1;
 149   5                }
 150   4              }while(a!=0x3E);
 151   3              
 152   3            }
 153   2            else{
 154   3              commande_serializer = transcode_commande_to_serializer(commande);
 155   3              formate_serializer(commande_serializer, message_s);
 156   3              serOutstring1(message_s);
 157   3              serOutstring(message_s);
 158   3              i=0;
 159   3              a=0;
 160   3              do{
 161   4                a=serInchar1();
 162   4                if (a!=0x00){
 163   5                  mess[i]=a;
 164   5                  i=i+1;
 165   5                }
 166   4              }while(a!=0x3E);
 167   3            }
 168   2            mess[i] = '\0';
 169   2            serOutstring(mess);
 170   2            break;
 171   2      
 172   2      
 173   2      // OK
 174   2          case Obstacle:
 175   2            Detect_Obst(commande);
 176   2            break;
 177   2      
 178   2      // OK
C51 COMPILER V9.51   LIEN_STRUCTURE_COMMANDE                                               05/25/2018 07:46:44 PAGE 4   

 179   2          case Courant:
 180   2            info.Mesure_Courant = courant;
 181   2            sprintf(courant_ascii,"%d", info.Mesure_Courant);
 182   2            serOutstring(courant_ascii);
 183   2            serOutstring("mA\n\r>");
 184   2            break;
 185   2          
 186   2      // OK
 187   2          case Energie :
 188   2            info.Mesure_Energie = energie;
 189   2            sprintf(energie_ascii,"%d", info.Mesure_Energie);
 190   2            serOutstring(energie_ascii);
 191   2            serOutstring("J\n\r>");
 192   2            break;
 193   2          
 194   2      // OK
 195   2          case Gene_Son:
 196   2            son_sonore(commande);
 197   2            serOutstring("\n\r>");
 198   2            break;
 199   2          
 200   2      // OK
 201   2          case Pointeur_Lum:
 202   2            pointeur_lum(commande);
 203   2            serOutstring("\n\r>");
 204   2            break;
 205   2      
 206   2          default:
 207   2            strcpy(mess,"\n\r#\n\r>");
 208   2            serOutstring(mess);
 209   2            break;
 210   2      
 211   2        }
 212   1      }
 213          
 214          void tempo_emiss(void){
 215   1        unsigned int x = 0;
 216   1      
 217   1        for(x=0;x<65000;x++);
 218   1        for(x=0;x<65000;x++);
 219   1        for(x=0;x<65000;x++);
 220   1        for(x=0;x<65000;x++);
 221   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1519    ----
   CONSTANT SIZE    =   1246    ----
   XDATA SIZE       =    134    1585
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
