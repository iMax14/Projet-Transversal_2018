C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:47:02 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe Main.c LARGE BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <c8051f020.h>
   2          #include <intrins.h>
   3          #include <string.h>
   4          #include <stdio.h>
   5          
   6          #include "Declarations_GPIO.h"
   7          #include "Config_Globale.h"
   8          #include "Timers.h"
   9          #include "Servomoteur_Vertical.h"
  10          #include "Config_SPI.h"
  11          #include "Transmission_SPI.h"
  12          #include "Transmission_UART0.h"
  13          #include "Config_UART0.h"
  14          #include "Pointeur_Lumineux.h"
  15          #include "Config_PCA.h"
  16          
  17          
  18          
  19          #define SYSCLK 22118400L
  20          
  21          // Global variables
  22          
  23          int Dest_msg_SPI[5] = 0;
  24          signed int Angle_voulu = 0x0000;
  25          char Angle_atteint;
  26          int w,j;
  27          extern unsigned char PWM;   // varie entre 0 et 255. permet de choisir le duty cycle
  28          extern unsigned int temp;    // utilisé dans le timer0
  29          
  30          extern unsigned char msg_CM4[256];
  31          extern unsigned char msg_PointLum[256];
  32          extern unsigned char msg_ServVert[256];
  33          extern unsigned char msg_Vue[256];
  34          extern unsigned char msg_FPGA[256];
  35          int a;
  36          
  37          int compteur,intensite,nombreCycle;
  38          float dureeAllumage,dureeExtinction;
  39          int cpt=0;
  40          
  41          void main (void) {
  42   1      
  43   1        EA=0;
  44   1        Init_Device();  //Initialisation du microcontrôleur
  45   1        Config_Timer2();
  46   1        Config_Timer3();
  47   1        InitTimer0(); 
  48   1        Config_SPI_SLAVE();
  49   1        Config_Clock_UART0();
  50   1        Config_UART0();
  51   1        Config_PCA();
  52   1        EA=1;
  53   1      
  54   1      /*Fonctions de tests de la connexion SPI
  55   1        trame_recue_test(0xD1);
C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:47:02 PAGE 2   

  56   1        trame_recue_test(0xD1);
  57   1        trame_recue_test(0x08);
  58   1        trame_recue_test(0x08);
  59   1        trame_recue_test(0x08);
  60   1        trame_recue_test(0x08);
  61   1        trame_recue_test(0xFF);
  62   1        trame_recue_test(0xFF);*/
  63   1      
  64   1      //  intensite = 10;
  65   1      //  dureeAllumage = 20;
  66   1      //  dureeExtinction = 20;
  67   1      //  nombreCycle = 5;
  68   1      
  69   1      //  cycleAllumageExtinction(intensite,dureeAllumage,dureeExtinction,nombreCycle);
  70   1      
  71   1      
  72   1        while (1){
  73   2          for(w=0; w<sizeof(Dest_msg_SPI);w++){
  74   3            if(Dest_msg_SPI[w] == 1)
  75   3              break;
  76   3            Allumage_Pointeur(0); //Exctinction du pointeur lumineux quand on ne l'utilise pas 
  77   3          }
  78   2          switch(w){
  79   3            case 0 :
  80   3              UART_CortexM4(msg_CM4); //On appelle sa fonction associée en lui envoyant son message
  81   3              trame_emise(0xEE);
  82   3            
  83   3              memset(msg_CM4,0,strlen(msg_CM4)); // RAZ du message
  84   3              Dest_msg_SPI[w] = 0;
  85   3              break;
  86   3            case 1 :
  87   3              intensite = (int) msg_PointLum[0];
  88   3              dureeAllumage = (float) msg_PointLum[2];
  89   3              dureeExtinction = (float) msg_PointLum[4];
  90   3              nombreCycle = (int) msg_PointLum[6];
  91   3            
  92   3              cycleAllumageExtinction(intensite,dureeAllumage,dureeExtinction,nombreCycle);
  93   3            
  94   3              memset(msg_PointLum,0,strlen(msg_PointLum)); // RAZ du message
  95   3              Dest_msg_SPI[w] = 0;
  96   3              break;
  97   3            case 2 :
  98   3              if (msg_ServVert[2] == 0xAA){ //L'angle est négatif
  99   4                msg_ServVert[0] =~ msg_ServVert[0];//On refait le complément pour bien réceptionner le message qui 
             -a été complémenter dans le Master
 100   4                Angle_voulu |= msg_ServVert[0]; 
 101   4                Angle_voulu += 0xFF00;
 102   4                Angle_atteint = CDE_Servo_V(Angle_voulu); //On appelle sa fonction associée en lui envoyant son mess
             -age
 103   4              }
 104   3              else{ //L'angle est positif
 105   4                Angle_voulu = msg_ServVert[0];
 106   4                Angle_atteint = CDE_Servo_V(Angle_voulu); //On appelle sa fonction associée en lui envoyant son mess
             -age
 107   4              }
 108   3              trame_emise(Angle_atteint);
 109   3              
 110   3              memset(msg_ServVert,0,strlen(msg_ServVert)); // RAZ du message
 111   3              Dest_msg_SPI[w] = 0;
 112   3              break;
 113   3            case 3 :
 114   3              /********
C51 COMPILER V9.51   MAIN                                                                  05/25/2018 07:47:02 PAGE 3   

 115   3              NON TRAITE
 116   3              *********/
 117   3              memset(msg_Vue,0,strlen(msg_Vue)); // RAZ du message
 118   3              Dest_msg_SPI[w] = 0;
 119   3              break;
 120   3            case 4 :
 121   3              /********
 122   3              NON TRAITE
 123   3              *********/
 124   3              memset(msg_FPGA,0,strlen(msg_FPGA)); // RAZ du message
 125   3              Dest_msg_SPI[w] = 0;
 126   3              break;
 127   3            default :
 128   3              break;
 129   3          }
 130   2      
 131   2        }
 132   1      
 133   1      }
 134          
 135          
 136          void ISR_Timer2 (void) interrupt 5 {
 137   1        TF2 = 0; //Remise à '0' du flag d'overflow
 138   1        PWM_servo=!PWM_servo; //On envoie le signal PWM au servomoteur
 139   1      }
 140          
 141          
 142          void ISR_SPI (void) interrupt 6 {
 143   1      
 144   1          SPIF = 0; //RAZ du flag d'écriture
 145   1      
 146   1          trame_recue(); // On réceptionne le message du Master
 147   1          trame_emise(0xEE); // On renvoie un message au Master pour lui accuser bonne réception
 148   1      
 149   1      }
 150          
 151          /******Cette fonction d'interruption permet d'incrémenter un compteur toutes les 10ms
 152                 afin de pouvoir gérer le temps de ON et de OFF du pointeur ******/
 153          void ISR_Timer3 (void) interrupt 14 {
 154   1      
 155   1        TMR3CN &= 0x04; //Remise � '0' du flag d'overflow
 156   1        cpt++;
 157   1      }
 158          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    599    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     35    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
