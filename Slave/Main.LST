C51 COMPILER V9.51   MAIN                                                                  05/24/2018 13:53:34 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe Main.c LARGE BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <c8051f020.h>
   2          #include <intrins.h>
   3          #include <string.h>
   4          #include <stdio.h>
   5          
   6          #include "Declarations_GPIO.h"
   7          #include "Config_Globale.h"
   8          #include "Timers.h"
   9          #include "Servomoteur_Vertical.h"
  10          #include "Config_SPI.h"
  11          #include "Transmission_SPI.h"
  12          #include "Transmission_UART0.h"
  13          #include "Config_UART0.h"
  14          #include "Pointeur_Lumineux.h"
  15          #include "Config_PCA.h"
  16          
  17          
  18          #define SYSCLK 22118400L
  19          
  20          // Global variables
  21          
  22          int Dest_msg_SPI[5] = 0;
  23          signed int Angle_voulu = 0x0000;
  24          char Angle_atteint;
  25          int w,j;
  26          
  27          extern unsigned char msg_CM4[256];
  28          extern unsigned char msg_PointLum[256];
  29          extern unsigned char msg_ServVert[256];
  30          extern unsigned char msg_Vue[256];
  31          extern unsigned char msg_FPGA[256];
  32          int a;
  33          
  34          int compteur,intensite,nombreCycle;
  35          float dureeAllumage,dureeExtinction;
  36          int cpt=0;
  37          
  38          void main (void) {
  39   1      
  40   1        EA=0;
  41   1        Init_Device();  //Initialisation du microcontrôleur
  42   1        Config_Timer2();
  43   1        Config_Timer3();
  44   1        InitTimer0(); 
  45   1        Config_SPI_SLAVE();
  46   1        Config_Clock_UART0();
  47   1        Config_UART0();
  48   1        Config_PCA();
  49   1        EA=1;
  50   1      
  51   1      /*Fonctions de tests de la connexion SPI
  52   1        trame_recue_test(0xD3);
  53   1        trame_recue_test(0xD3);
  54   1        trame_recue_test(0xA9);
  55   1        trame_recue_test(0xBB);
C51 COMPILER V9.51   MAIN                                                                  05/24/2018 13:53:34 PAGE 2   

  56   1        trame_recue_test(0xFF);
  57   1        trame_recue_test(0xFF);*/
  58   1      
  59   1      /*Fonction de tests pour le pilotage du pointeur lumineux
  60   1        intensite = 70;
  61   1        dureeAllumage = 88;
  62   1        dureeExtinction = 22;
  63   1        nombreCycle = 1;
  64   1      
  65   1        cycleAllumageExtinction(intensite,dureeAllumage,dureeExtinction,nombreCycle);*/
  66   1      
  67   1      
  68   1        while (1){
  69   2          for(w=0; w<sizeof(Dest_msg_SPI);w++){
  70   3            if(Dest_msg_SPI[w] == 1)
  71   3              break;
  72   3          }
  73   2          switch(w){
  74   3            case 0 :
  75   3              UART_CortexM4(msg_CM4); //On appelle sa fonction associée en lui envoyant son message
  76   3              trame_emise(0xEE);
  77   3            
  78   3              memset(msg_CM4,0,strlen(msg_CM4)); // RAZ du message
  79   3              Dest_msg_SPI[w] = 0;
  80   3              break;
  81   3            case 1 :
  82   3              intensite = (int) msg_PointLum[0];
  83   3              dureeAllumage = (float) msg_PointLum[2];
  84   3              dureeExtinction = (float) msg_PointLum[4];
  85   3              nombreCycle = (int) msg_PointLum[6];
  86   3            
  87   3              cycleAllumageExtinction(intensite,dureeAllumage,dureeExtinction,nombreCycle);
  88   3            
  89   3              memset(msg_PointLum,0,strlen(msg_PointLum)); // RAZ du message
  90   3              Dest_msg_SPI[w] = 0;
  91   3              break;
  92   3            case 2 :
  93   3              if (msg_ServVert[2] == 0xAA){ //L'angle est négatif
  94   4                msg_ServVert[0] =~ msg_ServVert[0];//On refait le complément pour bien réceptionner le message qui 
             -a été complémenter dans le Master
  95   4                Angle_voulu |= msg_ServVert[0]; 
  96   4                Angle_voulu += 0xFF00;
  97   4                Angle_atteint = CDE_Servo_V(Angle_voulu); //On appelle sa fonction associée en lui envoyant son mess
             -age
  98   4              }
  99   3              else{ //L'angle est positif
 100   4                Angle_voulu = msg_ServVert[0];
 101   4                Angle_atteint = CDE_Servo_V(Angle_voulu); //On appelle sa fonction associée en lui envoyant son mess
             -age
 102   4              }
 103   3              trame_emise(Angle_atteint);
 104   3              
 105   3              memset(msg_ServVert,0,strlen(msg_ServVert)); // RAZ du message
 106   3              Dest_msg_SPI[w] = 0;
 107   3              break;
 108   3            case 3 :
 109   3              
 110   3              memset(msg_Vue,0,strlen(msg_Vue)); // RAZ du message
 111   3              Dest_msg_SPI[w] = 0;
 112   3              break;
 113   3            case 4 :
 114   3              
C51 COMPILER V9.51   MAIN                                                                  05/24/2018 13:53:34 PAGE 3   

 115   3              memset(msg_FPGA,0,strlen(msg_FPGA)); // RAZ du message
 116   3              Dest_msg_SPI[w] = 0;
 117   3              break;
 118   3            default :
 119   3              break;
 120   3          }
 121   2      
 122   2        }
 123   1      
 124   1      }
 125          
 126          
 127          void ISR_Timer2 (void) interrupt 5 {
 128   1        TF2 = 0; //Remise à '0' du flag d'overflow
 129   1        PWM_servo=!PWM_servo; //On envoie le signal PWM au servomoteur
 130   1      }
 131          
 132          
 133          void ISR_SPI (void) interrupt 6 {
 134   1      
 135   1          SPIF = 0; //RAZ du flag d'écriture
 136   1      
 137   1          trame_recue(); // On réceptionne le message du Master
 138   1          trame_emise(0xEE); // On renvoie un message au Master pour lui accuser bonne réception
 139   1      
 140   1      }
 141          
 142          /******Cette fonction d'interruption permet d'incrémenter un compteur toutes les 10ms
 143                 afin de pouvoir gérer le temps de ON et de OFF du pointeur ******/
 144          void ISR_Timer3 (void) interrupt 14 {
 145   1      
 146   1        TMR3CN &= 0x04; //Remise � '0' du flag d'overflow
 147   1        cpt++;
 148   1      }
 149          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    593    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     35    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
